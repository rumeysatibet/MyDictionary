@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json
@using MyDictionary.Web.Services
@inject AuthenticationStateService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime
@inject ILogger<Header> Logger
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable

<header class="main-header">
    <div class="header-container">
        <!-- Logo ve Site Adƒ± -->
        <div class="logo-section">
            <a href="/" class="logo-link">
                <img src="/favicon.png" alt="MyDictionary Logo" class="logo" />
                <span class="site-name">MyDictionary</span>
            </a>
        </div>

        <!-- Arama Kutusu -->
        <div class="search-section">
            <div class="search-container">
                <input type="text" 
                       class="search-input" 
                       placeholder="kullanƒ±cƒ± ara..."
                       @bind="SearchQuery"
                       @onkeypress="HandleSearchKeyPress"
                       @oninput="HandleSearchInput" />
                <button class="search-button" @onclick="HandleSearch">
                    <span class="search-icon">üîç</span>
                </button>
                
                @if (showSearchResults && searchResults.Any())
                {
                    <div class="search-dropdown">
                        @foreach (var user in searchResults)
                        {
                            <div class="search-result-item" @onclick="() => NavigateToProfile(user.Username)">
                                <div class="user-avatar-small">
                                    @if (!string.IsNullOrEmpty(user.ProfilePhotoUrl))
                                    {
                                        <img src="https://apiservice/uploads/profiles/@user.ProfilePhotoUrl" alt="@user.Username" />
                                    }
                                    else
                                    {
                                        <div class="default-avatar-mini">@GetUserInitials(user.Username)</div>
                                    }
                                </div>
                                <div class="user-info">
                                    <div class="username">@user.Username</div>
                                    <div class="user-stats">@user.EntryCount entry ‚Ä¢ @user.FollowerCount takip√ßi</div>
                                </div>
                            </div>
                        }
                        @if (searchResults.Count >= 5)
                        {
                            <div class="search-more" @onclick="ViewAllResults">
                                T√ºm sonu√ßlarƒ± g√∂r...
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Giri≈ü ve Kayƒ±t Butonlarƒ± / Kullanƒ±cƒ± Men√ºs√º -->
        <div class="auth-section">
            @if (AuthService.IsAuthenticated)
            {
                <div class="user-menu">
                    <div class="user-actions">
                        <button class="notification-button" @onclick="ToggleNotifications" title="bildirimler">
                            <span class="notification-icon">üîî</span>
                            @if (unreadNotificationCount > 0)
                            {
                                <span class="notification-badge">@unreadNotificationCount</span>
                            }
                        </button>
                        <button class="message-button" @onclick="NavigateToMessages" title="mesajlar">
                            <span class="message-icon">üí¨</span>
                            @if (unreadMessageCount > 0)
                            {
                                <span class="message-badge">@unreadMessageCount</span>
                            }
                        </button>
                        <button class="user-button" @onclick="ToggleUserDropdown">
                            <span class="user-name">@(AuthService.CurrentUser?.Username ?? "ben")</span>
                            <span class="dropdown-arrow">‚ñº</span>
                        </button>
                    </div>
                    
                    @if (showNotifications)
                    {
                        <div class="notifications-dropdown" @onclick:stopPropagation="true">
                            <div class="notifications-header">
                                <h4>Bildirimler</h4>
                                @if (notifications.Any(n => !n.IsRead))
                                {
                                    <button class="mark-all-read-btn" @onclick="MarkAllNotificationsRead">
                                        t√ºm√ºn√º okundu i≈üaretle
                                    </button>
                                }
                            </div>
                            <div class="notifications-body">
                                @if (notifications.Any())
                                {
                                    @foreach (var notification in notifications.Take(10))
                                    {
                                        <div class="notification-item @(!notification.IsRead ? "unread" : "")" @onclick="() => HandleNotificationClick(notification)">
                                            <div class="notification-content">
                                                @if (notification.FromUser != null)
                                                {
                                                    <div class="notification-avatar">
                                                        @if (!string.IsNullOrEmpty(notification.FromUser.ProfilePhotoUrl))
                                                        {
                                                            <img src="https://apiservice/uploads/profiles/@notification.FromUser.ProfilePhotoUrl" alt="@notification.FromUser.Username" />
                                                        }
                                                        else
                                                        {
                                                            <div class="default-avatar-mini">@GetUserInitials(notification.FromUser.Username)</div>
                                                        }
                                                    </div>
                                                }
                                                <div class="notification-text">
                                                    <p>@notification.Content</p>
                                                    <span class="notification-time">@GetTimeAgo(notification.CreatedAt)</span>
                                                </div>
                                            </div>
                                            @if (!notification.IsRead)
                                            {
                                                <div class="unread-indicator"></div>
                                            }
                                        </div>
                                    }
                                    @if (notifications.Count > 10)
                                    {
                                        <div class="view-all-notifications" @onclick="ViewAllNotifications">
                                            T√ºm bildirimleri g√∂r...
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="no-notifications">
                                        <span>üîî</span>
                                        <p>Hen√ºz bildirim yok</p>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (showUserDropdown)
                    {
                        <div class="user-dropdown" @onclick:stopPropagation="true">
                            <button class="dropdown-item" @onclick="@(() => CloseDropdownAndNavigate($"/profile/{AuthService.CurrentUser?.Username}"))">
                                <span class="dropdown-icon">üë§</span>
                                profil
                            </button>
                            <button class="dropdown-item" @onclick="@(() => CloseDropdownAndNavigate("/settings"))">
                                <span class="dropdown-icon">‚öôÔ∏è</span>
                                ayarlar
                            </button>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item logout-item" @onclick="HandleLogout">
                                <span class="dropdown-icon">üö™</span>
                                √ßƒ±kƒ±≈ü yap
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <a href="/login" class="auth-link login-link">giri≈ü</a>
                <a href="/register" class="auth-link register-link">kayƒ±t ol</a>
            }
        </div>
    </div>

    <!-- Kategori Navigasyonu -->
    <nav class="category-nav">
        <div class="category-container">
            <a href="/category/yazilim" class="category-link">yazƒ±lƒ±m</a>
            <a href="/category/yasam" class="category-link">ya≈üam</a>
            <a href="/category/diziler" class="category-link">diziler</a>
            <a href="/category/kitaplar" class="category-link">kitaplar</a>
            <a href="/category/muzik" class="category-link">m√ºzik</a>
            <a href="/category/spor" class="category-link">spor</a>
            <a href="/category/tarih" class="category-link">tarih</a>
            <a href="/category/seyahat" class="category-link">seyahat</a>
        </div>
    </nav>
</header>

@code {
    private string SearchQuery = "";
    private bool showUserDropdown = false;
    private bool showSearchResults = false;
    private bool showNotifications = false;
    private List<UserSearchResult> searchResults = new();
    private List<NotificationResult> notifications = new();
    private int unreadNotificationCount = 0;
    private int unreadMessageCount = 0;
    private System.Threading.Timer? searchTimer;
    private System.Threading.Timer? notificationTimer;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("üîÑ Header OnInitializedAsync ba≈ülatƒ±ldƒ±");
        // AuthService'i initialize et
        await AuthService.InitializeAsync();
        AuthService.OnAuthenticationChanged += StateHasChanged;
        Logger.LogInformation($"üîê Header Initialize - IsAuthenticated: {AuthService.IsAuthenticated}, User: {AuthService.CurrentUser?.Username ?? "null"}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("üîÑ Header OnAfterRenderAsync (firstRender) ba≈ülatƒ±ldƒ±");
            // ƒ∞lk render sonrasƒ± localStorage'dan kullanƒ±cƒ± bilgilerini y√ºkle
            await AuthService.LoadFromStorageAsync();
            Logger.LogInformation($"üîê Header AfterRender - IsAuthenticated: {AuthService.IsAuthenticated}, User: {AuthService.CurrentUser?.Username ?? "null"}");
            
            // Bildirimlarƒ± ve mesajlarƒ± y√ºkle ve periyodik olarak kontrol et
            if (AuthService.IsAuthenticated)
            {
                await LoadNotifications();
                await LoadUnreadMessageCount();
                StartNotificationTimer();
            }
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationChanged -= StateHasChanged;
        searchTimer?.Dispose();
        notificationTimer?.Dispose();
    }

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? "";
        
        // Timer'ƒ± iptal et
        searchTimer?.Dispose();
        
        if (string.IsNullOrWhiteSpace(SearchQuery) || SearchQuery.Length < 2)
        {
            showSearchResults = false;
            StateHasChanged();
            return;
        }
        
        // 300ms delay ile arama yap
        searchTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await SearchUsers();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private async Task HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            await SearchUsers();
        }
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSearch();
        }
        else if (e.Key == "Escape")
        {
            showSearchResults = false;
            StateHasChanged();
        }
    }

    private async Task SearchUsers()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SearchQuery) || SearchQuery.Length < 2)
            {
                showSearchResults = false;
                return;
            }

            Logger.LogInformation($"üîç Header'da kullanƒ±cƒ± arama: {SearchQuery}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.GetAsync($"https://apiservice/api/user/search?query={Uri.EscapeDataString(SearchQuery)}&pageSize=5");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);
                
                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    if (apiResponse.TryGetProperty("users", out var usersElement))
                    {
                        searchResults.Clear();
                        
                        foreach (var userElement in usersElement.EnumerateArray())
                        {
                            searchResults.Add(new UserSearchResult
                            {
                                Id = userElement.GetProperty("id").GetInt32(),
                                Username = userElement.GetProperty("username").GetString() ?? "",
                                ProfilePhotoUrl = userElement.TryGetProperty("profilePhotoUrl", out var photoElement) ? photoElement.GetString() : null,
                                EntryCount = userElement.GetProperty("entryCount").GetInt32(),
                                FollowerCount = userElement.GetProperty("followerCount").GetInt32()
                            });
                        }
                        
                        showSearchResults = searchResults.Any();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Kullanƒ±cƒ± arama hatasƒ±: {ex.Message}");
        }
    }

    private void NavigateToProfile(string username)
    {
        showSearchResults = false;
        SearchQuery = "";
        Navigation.NavigateTo($"/profile/{username}");
    }

    private void ViewAllResults()
    {
        showSearchResults = false;
        Navigation.NavigateTo($"/search?q={Uri.EscapeDataString(SearchQuery)}");
    }

    private string GetUserInitials(string username)
    {
        if (string.IsNullOrEmpty(username)) return "?";
        return username.Length >= 2 ? username.Substring(0, 2).ToUpper() : username.ToUpper();
    }

    private void ToggleUserDropdown()
    {
        showUserDropdown = !showUserDropdown;
    }

    private void CloseDropdown()
    {
        showUserDropdown = false;
    }

    private void CloseDropdownAndNavigate(string url)
    {
        showUserDropdown = false;
        Navigation.NavigateTo(url);
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        showUserDropdown = false;
        notificationTimer?.Dispose();
        // Anasayfaya y√∂nlendir
        Navigation.NavigateTo("/");
    }

    private void ToggleNotifications()
    {
        showNotifications = !showNotifications;
        showUserDropdown = false;
        if (showNotifications)
        {
            Task.Run(async () => await LoadNotifications());
        }
    }

    private async Task LoadNotifications()
    {
        try
        {
            if (!AuthService.IsAuthenticated) return;

            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.GetAsync("https://apiservice/api/notifications?pageSize=20");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);

                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    notifications.Clear();
                    unreadNotificationCount = apiResponse.GetProperty("unreadCount").GetInt32();

                    if (apiResponse.TryGetProperty("notifications", out var notificationsElement))
                    {
                        foreach (var notificationElement in notificationsElement.EnumerateArray())
                        {
                            var notification = new NotificationResult
                            {
                                Id = notificationElement.GetProperty("id").GetInt32(),
                                Type = notificationElement.GetProperty("type").GetInt32(),
                                Content = notificationElement.GetProperty("content").GetString() ?? "",
                                IsRead = notificationElement.GetProperty("isRead").GetBoolean(),
                                CreatedAt = notificationElement.GetProperty("createdAt").GetDateTime()
                            };

                            if (notificationElement.TryGetProperty("fromUser", out var fromUserElement) && fromUserElement.ValueKind != JsonValueKind.Null)
                            {
                                notification.FromUser = new NotificationUser
                                {
                                    Id = fromUserElement.GetProperty("id").GetInt32(),
                                    Username = fromUserElement.GetProperty("username").GetString() ?? "",
                                    ProfilePhotoUrl = fromUserElement.TryGetProperty("profilePhotoUrl", out var photoElement) ? photoElement.GetString() : null
                                };
                            }

                            notifications.Add(notification);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Bildirimler y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private void StartNotificationTimer()
    {
        // Her 30 saniyede bir bildirimleri ve mesajlarƒ± kontrol et
        notificationTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadNotifications();
                await LoadUnreadMessageCount();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task HandleNotificationClick(NotificationResult notification)
    {
        if (!notification.IsRead)
        {
            await MarkNotificationAsRead(notification.Id);
            notification.IsRead = true;
            unreadNotificationCount = Math.Max(0, unreadNotificationCount - 1);
        }

        showNotifications = false;

        // Bildirim t√ºr√ºne g√∂re y√∂nlendirme
        if (notification.Type == 1 || notification.Type == 2) // FriendRequest or FriendRequestAccepted
        {
            if (notification.FromUser != null)
            {
                Navigation.NavigateTo($"/profile/{notification.FromUser.Username}");
            }
        }

        StateHasChanged();
    }

    private async Task MarkNotificationAsRead(int notificationId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            await httpClient.PostAsync($"https://apiservice/api/notifications/{notificationId}/mark-read", null);
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Bildirim okuma i≈üaretleme hatasƒ±: {ex.Message}");
        }
    }

    private async Task MarkAllNotificationsRead()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.PostAsync("https://apiservice/api/notifications/mark-all-read", null);
            if (response.IsSuccessStatusCode)
            {
                foreach (var notification in notifications)
                {
                    notification.IsRead = true;
                }
                unreadNotificationCount = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå T√ºm bildirimleri okuma i≈üaretleme hatasƒ±: {ex.Message}");
        }
    }

    private void ViewAllNotifications()
    {
        showNotifications = false;
        Navigation.NavigateTo("/notifications");
    }

    private async Task LoadUnreadMessageCount()
    {
        try
        {
            if (!AuthService.IsAuthenticated) return;

            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.GetAsync("https://apiservice/api/messages/unread-count");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);

                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    unreadMessageCount = apiResponse.GetProperty("unreadCount").GetInt32();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Okunmamƒ±≈ü mesaj sayƒ±sƒ± y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private void NavigateToMessages()
    {
        Navigation.NavigateTo("/messages");
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1) return "az √∂nce";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}dk √∂nce";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}sa √∂nce";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}g√ºn √∂nce";
        
        return dateTime.ToString("dd MMM");
    }

    public class UserSearchResult
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string? ProfilePhotoUrl { get; set; }
        public int EntryCount { get; set; }
        public int FollowerCount { get; set; }
    }

    public class NotificationResult
    {
        public int Id { get; set; }
        public int Type { get; set; }
        public string Content { get; set; } = "";
        public bool IsRead { get; set; }
        public DateTime CreatedAt { get; set; }
        public NotificationUser? FromUser { get; set; }
    }

    public class NotificationUser
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string? ProfilePhotoUrl { get; set; }
    }
}