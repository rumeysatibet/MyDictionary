@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Sidebar> Logger

<div class="sidebar-container">
    <!-- Sık Kullanılanlar -->
    <div class="sidebar-section">
        <h3 class="sidebar-title">sık kullanılanlar</h3>
        <div class="sidebar-links">
            @if (popularTopics.Any())
            {
                @foreach (var topic in popularTopics)
                {
                    <a href="/topic/@topic.Slug" class="sidebar-link">
                        <span class="link-text">@topic.Title</span>
                        <span class="visit-count">(@topic.EntryCount)</span>
                    </a>
                }
            }
            else
            {
                <div class="no-sidebar-content">henüz popüler başlık yok</div>
            }
        </div>
    </div>

    <!-- Kategoriler -->
    <div class="sidebar-section">
        <h3 class="sidebar-title">kategoriler</h3>
        <div class="sidebar-links">
            @if (categories.Any())
            {
                @foreach (var category in categories.Take(6))
                {
                    <a href="/category/@category.Slug" class="sidebar-link">
                        <span class="link-text">@category.Name</span>
                        <span class="entry-count">@category.TopicCount başlık • @category.TotalEntries entry</span>
                    </a>
                }
            }
            else
            {
                <div class="no-sidebar-content">henüz kategori yok</div>
            }
        </div>
    </div>

    <!-- Rastgele Başlıklar -->
    <div class="sidebar-section">
        <h3 class="sidebar-title">rastgele</h3>
        <div class="sidebar-links">
            @if (randomTopics.Any())
            {
                @foreach (var topic in randomTopics)
                {
                    <a href="/topic/@topic.Slug" class="sidebar-link">
                        <span class="link-text">@topic.Title</span>
                        <span class="visit-count">(@topic.EntryCount entry)</span>
                    </a>
                }
            }
            else
            {
                <div class="no-sidebar-content">henüz başlık yok</div>
            }
        </div>
    </div>
</div>

@code {
    private List<PopularTopicDto> popularTopics = new();
    private List<CategoryWithStatsDto> categories = new();
    private List<TopicDto> randomTopics = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSidebarDataAsync();
    }

    private async Task LoadSidebarDataAsync()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");

            // Popüler başlıkları yükle
            var popularResponse = await httpClient.GetFromJsonAsync<List<PopularTopicDto>>("https://apiservice/api/topics/popular?count=5");
            popularTopics = popularResponse ?? new List<PopularTopicDto>();

            // Kategorileri istatistiklerle birlikte yükle
            var categoriesResponse = await httpClient.GetFromJsonAsync<List<CategoryWithStatsDto>>("https://apiservice/api/categories/with-stats");
            categories = categoriesResponse?.Take(6).ToList() ?? new List<CategoryWithStatsDto>();

            // Rastgele başlıklar için tüm başlıkları yükle ve rastgele seç
            var allTopicsResponse = await httpClient.GetFromJsonAsync<List<TopicDto>>("https://apiservice/api/topics?pageSize=100");
            if (allTopicsResponse != null && allTopicsResponse.Any())
            {
                var random = new Random();
                randomTopics = allTopicsResponse
                    .Where(t => t.EntryCount > 0)
                    .OrderBy(_ => random.Next())
                    .Take(3)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sidebar verileri yüklenirken hata oluştu");
            popularTopics = new List<PopularTopicDto>();
            categories = new List<CategoryWithStatsDto>();
            randomTopics = new List<TopicDto>();
        }
    }

    public class PopularTopicDto
    {
        public string Title { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public int EntryCount { get; set; }
    }

    public class CategoryWithStatsDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
        public int TopicCount { get; set; }
        public int TotalEntries { get; set; }
    }

    public class TopicDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public CategoryDto Category { get; set; } = new();
        public string CreatedBy { get; set; } = string.Empty;
        public int EntryCount { get; set; }
        public int ViewCount { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? LastEntryAt { get; set; }
    }

    public class CategoryDto
    {
        public string Name { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
    }
}