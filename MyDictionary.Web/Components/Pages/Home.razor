@page "/"
@rendermode InteractiveServer
@using MyDictionary.Web.Services
@inject AuthenticationStateService AuthService
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Home> Logger

<PageTitle>MyDictionary</PageTitle>

<div class="home-container">
    @if (AuthService.IsAuthenticated)
    {
        <div class="welcome-section">
            <h1 class="welcome-message">ho≈ü geldin, @AuthService.CurrentUser?.Username!</h1>
            <p class="welcome-subtitle">bug√ºn hangi konularda entry girmek istiyorsun?</p>
        </div>
    }
    
    <!-- Son Ba≈ülƒ±klar -->
    <div class="section">
        <h2 class="section-title">son ba≈ülƒ±klar</h2>
        <div class="topics-list">
            @if (recentTopics != null && recentTopics.Any())
            {
                @foreach (var topic in recentTopics)
                {
                    <div class="topic-item">
                        <a href="/topic/@topic.Slug" class="topic-link">@topic.Title</a>
                        <span class="topic-info">
                            <span class="entry-count">@topic.EntryCount entry</span>
                            <span class="last-update">@GetTimeAgo(topic.LastEntryAt ?? topic.CreatedAt)</span>
                        </span>
                    </div>
                }
            }
            else
            {
                <div class="no-content">hen√ºz ba≈ülƒ±k bulunmuyor</div>
            }
        </div>
    </div>

    <!-- G√ºn√ºn Ba≈ülƒ±klarƒ± -->
    <div class="section">
        <h2 class="section-title">g√ºn√ºn ba≈ülƒ±klarƒ±</h2>
        <div class="topics-list">
            @if (popularTopics != null && popularTopics.Any())
            {
                @foreach (var topic in popularTopics)
                {
                    <div class="topic-item @(topic.EntryCount > 50 ? "featured" : "")">
                        <a href="/topic/@topic.Slug" class="topic-link">@topic.Title</a>
                        <span class="topic-info">
                            <span class="entry-count">@topic.EntryCount entry</span>
                            <span class="last-update">@GetTimeAgo(topic.LastEntryAt ?? topic.CreatedAt)</span>
                        </span>
                    </div>
                }
            }
            else
            {
                <div class="no-content">hen√ºz ba≈ülƒ±k bulunmuyor</div>
            }
        </div>
    </div>


    <!-- Son G√ºncellemeler -->
    <div class="section">
        <h2 class="section-title">son g√ºncellemeler</h2>
        <div class="entry-preview">
            @if (recentEntries != null && recentEntries.Any())
            {
                @foreach (var entry in recentEntries)
                {
                    <div class="entry-item">
                        <div class="entry-header">
                            <a href="/topic/@entry.Topic.Slug" class="entry-topic">@entry.Topic.Title</a>
                            <span class="entry-meta">
                                <a href="/user/@entry.CreatedBy" class="entry-author">@entry.CreatedBy</a>
                                <span class="entry-time">@GetTimeAgo(entry.CreatedAt)</span>
                            </span>
                        </div>
                        <div class="entry-content">
                            @if (!string.IsNullOrEmpty(entry.ContentHtml))
                            {
                                <MyDictionary.Web.Components.Shared.EntryContent ContentHtml="@GetPreviewHtml(entry.ContentHtml)" />
                            }
                            else
                            {
                                <MyDictionary.Web.Components.Shared.EntryContent Content="@GetPreviewText(entry.Content)" />
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-content">hen√ºz entry bulunmuyor</div>
            }
        </div>
    </div>
</div>

@code {
    private List<TopicDto>? recentTopics;
    private List<TopicDto>? popularTopics;
    private List<EntryDto>? recentEntries;
    

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        await LoadDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.LoadFromStorageAsync();
            Logger.LogInformation($"üè† Ana sayfa - IsAuthenticated: {AuthService.IsAuthenticated}");
            Logger.LogInformation($"üè† Ana sayfa - CurrentUser: {AuthService.CurrentUser?.Username ?? "null"}");
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // Son ba≈ülƒ±klarƒ± y√ºkle (en son entry'si olan)
            var recentResponse = await httpClient.GetFromJsonAsync<List<TopicDto>>("https://apiservice/api/topics?pageSize=5");
            recentTopics = recentResponse ?? new List<TopicDto>();

            // Pop√ºler ba≈ülƒ±klarƒ± y√ºkle (en √ßok entry'si olan)
            var popularResponse = await httpClient.GetFromJsonAsync<List<TopicDto>>("https://apiservice/api/topics?pageSize=3");
            popularTopics = popularResponse?.OrderByDescending(t => t.EntryCount).Take(3).ToList() ?? new List<TopicDto>();

            // Son entry'leri y√ºkle
            var entriesResponse = await httpClient.GetFromJsonAsync<List<EntryDto>>("https://apiservice/api/entries?pageSize=2");
            recentEntries = entriesResponse ?? new List<EntryDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ana sayfa verileri y√ºklenirken hata olu≈ütu");
            recentTopics = new List<TopicDto>();
            popularTopics = new List<TopicDto>();
            recentEntries = new List<EntryDto>();
        }
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalMinutes < 1)
            return "≈üimdi";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} dakika √∂nce";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} saat √∂nce";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} g√ºn √∂nce";
        
        return dateTime.ToString("dd.MM.yyyy");
    }

    private string GetPreviewText(string content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return "";
        
        var preview = content.Length > 120 ? content.Substring(0, 120) + "..." : content;
        return preview;
    }

    private string? GetPreviewHtml(string? contentHtml)
    {
        if (string.IsNullOrWhiteSpace(contentHtml))
            return null;
        
        // HTML i√ßeriƒüi varsa, sadece entry-link'leri koru, geri kalanƒ±nƒ± d√ºz metne √ßevir
        // √ñnce entry-link span'lerini koru
        var linkPattern = @"<span class=""entry-link"" data-url=""([^""]+)"">\(bakƒ±nƒ±z\)</span>";
        var links = new List<string>();
        var preserved = System.Text.RegularExpressions.Regex.Replace(contentHtml, linkPattern, match =>
        {
            links.Add(match.Value);
            return $"LINK_PLACEHOLDER_{links.Count - 1}";
        });
        
        // HTML tag'lerini temizle (linkler dƒ±≈üƒ±nda)
        var plainText = System.Text.RegularExpressions.Regex.Replace(preserved, @"<[^>]+>", "");
        
        // Text'i kƒ±salt
        if (plainText.Length > 120)
        {
            plainText = plainText.Substring(0, 120) + "...";
        }
        
        // Link placeholder'larƒ±nƒ± geri koy
        for (int i = 0; i < links.Count; i++)
        {
            plainText = plainText.Replace($"LINK_PLACEHOLDER_{i}", links[i]);
        }
        
        return plainText;
    }

    // DTO sƒ±nƒ±flarƒ±
    public class TopicDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public CategoryDto Category { get; set; } = new();
        public string CreatedBy { get; set; } = string.Empty;
        public int EntryCount { get; set; }
        public int ViewCount { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? LastEntryAt { get; set; }
    }

    public class CategoryDto
    {
        public string Name { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
    }

    public class EntryDto
    {
        public int Id { get; set; }
        public string Content { get; set; } = string.Empty;
        public string? ContentHtml { get; set; }
        public TopicSummaryDto Topic { get; set; } = new();
        public string CreatedBy { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public int FavoriteCount { get; set; }
    }

    public class TopicSummaryDto
    {
        public string Title { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
    }
}