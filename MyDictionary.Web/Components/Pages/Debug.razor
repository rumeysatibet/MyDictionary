@page "/debug/users"
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Debug> Logger

<PageTitle>Debug - Kullanıcılar</PageTitle>

<div style="max-width: 800px; margin: 20px auto; padding: 20px; background: white; border-radius: 8px;">
    <h2>Kayıtlı Kullanıcılar (Debug)</h2>
    
    <button class="btn btn-primary" @onclick="LoadUsers" disabled="@isLoading">
        @if (isLoading)
        {
            <span>Yükleniyor...</span>
        }
        else
        {
            <span>Kullanıcıları Yükle</span>
        }
    </button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="background: #ffebee; border: 1px solid #f44336; color: #d32f2f; padding: 10px; margin: 10px 0; border-radius: 4px;">
            @errorMessage
        </div>
    }

    @if (users.Any())
    {
        <div style="margin-top: 20px;">
            <h3>Toplam @users.Count kullanıcı bulundu:</h3>
            
            <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                <thead>
                    <tr style="background: #f5f5f5;">
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">ID</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Kullanıcı Adı</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">E-posta</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Kayıt Tarihi</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Son Giriş</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Entry Sayısı</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td style="border: 1px solid #ddd; padding: 8px;">@user.Id</td>
                            <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">@user.Username</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">@user.Email</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">@user.CreatedAt.ToString("dd.MM.yyyy HH:mm")</td>
                            <td style="border: 1px solid #ddd; padding: 8px;">
                                @(user.LastLoginAt?.ToString("dd.MM.yyyy HH:mm") ?? "Hiç giriş yapmamış")
                            </td>
                            <td style="border: 1px solid #ddd; padding: 8px;">@user.EntryCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading)
    {
        <p style="margin-top: 20px; color: #666;">Henüz kullanıcı yüklenmedi. Yukarıdaki butona tıklayın.</p>
    }
</div>

@code {
    private List<UserDebugInfo> users = new();
    private bool isLoading = false;
    private string errorMessage = "";

    private async Task LoadUsers()
    {
        isLoading = true;
        errorMessage = "";
        users.Clear();

        try
        {
            Logger.LogInformation("🔍 Kullanıcılar yükleniyor...");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.GetAsync("https://apiservice/api/auth/debug/users");
            var responseContent = await response.Content.ReadAsStringAsync();
            
            Logger.LogInformation($"📥 API Response Status: {response.StatusCode}");
            Logger.LogInformation($"📥 API Response Content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                var usersJson = JsonSerializer.Deserialize<JsonElement>(responseContent);
                
                if (usersJson.ValueKind == JsonValueKind.Array)
                {
                    foreach (var userElement in usersJson.EnumerateArray())
                    {
                        var user = new UserDebugInfo
                        {
                            Id = userElement.GetProperty("id").GetInt32(),
                            Username = userElement.GetProperty("username").GetString() ?? "",
                            Email = userElement.GetProperty("email").GetString() ?? "",
                            CreatedAt = userElement.GetProperty("createdAt").GetDateTime(),
                            LastLoginAt = userElement.TryGetProperty("lastLoginAt", out var lastLoginElement) && !lastLoginElement.ValueEquals("null")
                                ? lastLoginElement.GetDateTime() : null,
                            EntryCount = userElement.GetProperty("entryCount").GetInt32()
                        };
                        
                        users.Add(user);
                    }
                    
                    Logger.LogInformation($"✅ {users.Count} kullanıcı yüklendi");
                }
            }
            else
            {
                errorMessage = $"API Hatası: {response.StatusCode} - {responseContent}";
                Logger.LogError($"❌ API Hatası: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Hata: {ex.Message}";
            Logger.LogError($"💥 Hata: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class UserDebugInfo
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public DateTime? LastLoginAt { get; set; }
        public int EntryCount { get; set; }
    }
}

<style>
    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #0056b3;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
</style>