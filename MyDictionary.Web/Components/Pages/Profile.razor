@page "/profile/{username}"
@page "/profile"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using MyDictionary.Web.Services
@inject ILogger<Profile> Logger
@inject AuthenticationStateService AuthService
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>@GetPageTitle() - MyDictionary</PageTitle>

<div class="profile-container">
    @if (isLoadingProfile)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Profil yükleniyor...</p>
        </div>
    }
    else if (userNotFound)
    {
        <div class="error-container">
            <div class="error-icon">👤</div>
            <h3>Kullanıcı Bulunamadı</h3>
            <p>@username adında bir kullanıcı bulunamadı.</p>
            <button class="btn btn-primary" @onclick="NavigateToHome">Anasayfaya Dön</button>
        </div>
    }
    else if (currentUser != null)
    {
    <div class="profile-content">
        <!-- Sol Kolon - Kullanıcı Bilgileri -->
        <div class="profile-sidebar">
            <div class="user-info-card">
                <div class="profile-photo-section">
                    <div class="profile-photo">
                        @if (!string.IsNullOrEmpty(currentUser.ProfilePhotoUrl))
                        {
                            <img src="/uploads/profiles/@currentUser.ProfilePhotoUrl" alt="@currentUser.Username" />
                        }
                        else
                        {
                            <div class="default-avatar">
                                @GetInitials(currentUser.Username)
                            </div>
                        }
                        @if (IsOwnProfile())
                        {
                            <button class="photo-edit-btn" @onclick="OpenPhotoUpload">
                                <span class="edit-icon">📷</span>
                            </button>
                        }
                    </div>
                    
                    @if (showPhotoUpload)
                    {
                        <div class="photo-upload-modal">
                            <div class="upload-content">
                                <h4>Profil Fotoğrafı Yükle</h4>
                                <InputFile OnChange="HandlePhotoUpload" accept="image/*" />
                                <div class="upload-actions">
                                    <button class="btn btn-primary" @onclick="UploadPhoto" disabled="@isUploadingPhoto">
                                        @if (isUploadingPhoto)
                                        {
                                            <span>Yükleniyor...</span>
                                        }
                                        else
                                        {
                                            <span>Yükle</span>
                                        }
                                    </button>
                                    <button class="btn btn-secondary" @onclick="ClosePhotoUpload">İptal</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="user-details">
                    <div class="user-header">
                        <h2 class="username">@currentUser.Username</h2>
                        @if (!IsOwnProfile() && AuthService.IsAuthenticated)
                        {
                            <div class="profile-actions">
                                @if (relationshipStatus == "friend")
                                {
                                    <button class="btn btn-friends" disabled>
                                        ✓ arkadaş
                                    </button>
                                    <button class="btn btn-message" @onclick="SendMessage">
                                        mesaj gönder
                                    </button>
                                }
                                else if (relationshipStatus == "request_sent")
                                {
                                    <button class="btn btn-pending" disabled>
                                        istek gönderildi
                                    </button>
                                }
                                else if (relationshipStatus == "request_received")
                                {
                                    <button class="btn btn-accept" @onclick="AcceptFriendRequest">
                                        arkadaşlığı kabul et
                                    </button>
                                    <button class="btn btn-reject" @onclick="RejectFriendRequest">
                                        reddet
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-add-friend" @onclick="SendFriendRequest">
                                        arkadaş ekle
                                    </button>
                                }
                            </div>
                        }
                    </div>
                    <p class="join-date">@currentUser.CreatedAt.ToString("MMMM yyyy")'dan beri üye</p>
                    
                    <div class="stats-grid">
                        <div class="stat-item clickable" @onclick="ShowEntries">
                            <span class="stat-number">@currentUser.EntryCount</span>
                            <span class="stat-label">entry</span>
                        </div>
                        
                        <div class="stat-item clickable" @onclick="ShowFollowers">
                            <span class="stat-number">@currentUser.FollowerCount</span>
                            <span class="stat-label">takipçi</span>
                        </div>
                        
                        <div class="stat-item clickable" @onclick="ShowFollowing">
                            <span class="stat-number">@currentUser.FollowingCount</span>
                            <span class="stat-label">takip</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sağ Kolon - Entry ve Favoriler -->
        <div class="profile-main">
            <div class="tab-container">
                <div class="tab-buttons">
                    <button class="tab-btn @(activeTab == "entries" ? "active" : "")" 
                            @onclick="@(async () => await SwitchTab("entries"))">
                        girdiğim entry'ler
                    </button>
                    <button class="tab-btn @(activeTab == "favorites" ? "active" : "")" 
                            @onclick="@(async () => await SwitchTab("favorites"))">
                        favori entry'lerim
                    </button>
                </div>

                <div class="tab-content">
                    @if (activeTab == "entries")
                    {
                        <div class="entries-list">
                            @if (userEntries.Any())
                            {
                                @foreach (var entry in userEntries)
                                {
                                    <div class="entry-item">
                                        <div class="entry-header">
                                            <a href="/topic/@entry.TopicSlug" class="entry-topic">@entry.TopicTitle</a>
                                            <span class="entry-date">@entry.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                        </div>
                                        <div class="entry-content">
                                            <EntryContent Content="@entry.Content" ContentHtml="@entry.ContentHtml" />
                                        </div>
                                        <div class="entry-stats">
                                            <span class="vote-count">@entry.VoteCount oy</span>
                                            <span class="favorite-count">@entry.FavoriteCount favori</span>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="empty-state">
                                    <p>henüz hiç entry girmemişsiniz.</p>
                                    <a href="/" class="btn btn-primary">entry yazmaya başla</a>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="favorites-list">
                            @if (favoriteEntries.Any())
                            {
                                @foreach (var entry in favoriteEntries)
                                {
                                    <div class="entry-item">
                                        <div class="entry-header">
                                            <a href="/topic/@entry.TopicSlug" class="entry-topic">@entry.TopicTitle</a>
                                            <span class="entry-author">@entry.AuthorUsername</span>
                                            <span class="entry-date">@entry.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                                        </div>
                                        <div class="entry-content">
                                            <EntryContent Content="@entry.Content" ContentHtml="@entry.ContentHtml" />
                                        </div>
                                        <div class="entry-stats">
                                            <span class="vote-count">@entry.VoteCount oy</span>
                                            <button class="unfavorite-btn" @onclick="() => RemoveFromFavorites(entry.Id)">
                                                favorilerden çıkar
                                            </button>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="empty-state">
                                    <p>henüz hiç entry favorilemediniz.</p>
                                    <a href="/" class="btn btn-primary">entry'leri keşfet</a>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Alt Kısım - Hakkımda -->
    <div class="about-section">
        <div class="about-card">
            <h3>hakkımda</h3>
            @if (isEditingAbout)
            {
                <div class="about-edit">
                    <textarea @bind="aboutText" placeholder="kendinizi tanıtın..." rows="6" maxlength="500"></textarea>
                    <div class="char-count">@(500 - aboutText.Length) karakter kaldı</div>
                    <div class="about-actions">
                        <button class="btn btn-primary" @onclick="SaveAbout" disabled="@isSavingAbout">
                            @if (isSavingAbout)
                            {
                                <span>kaydediliyor...</span>
                            }
                            else
                            {
                                <span>kaydet</span>
                            }
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelEditAbout">iptal</button>
                    </div>
                </div>
            }
            else
            {
                <div class="about-display">
                    @if (!string.IsNullOrEmpty(currentUser.About))
                    {
                        <p>@currentUser.About</p>
                    }
                    else
                    {
                        <p class="empty-about">henüz bir tanıtım yazmadınız.</p>
                    }
                    @if (IsOwnProfile())
                    {
                        <button class="btn btn-outline" @onclick="StartEditAbout">düzenle</button>
                    }
                </div>
            }
        </div>
    </div>
    }
</div>

<!-- Takipçi/Takip Modali -->
@if (showFollowModal)
{
    <div class="modal-overlay" @onclick="CloseFollowModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h4>@followModalTitle</h4>
                <button class="modal-close" @onclick="CloseFollowModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (followModalUsers.Any())
                {
                    @foreach (var user in followModalUsers)
                    {
                        <div class="user-item">
                            <div class="user-avatar">
                                @if (!string.IsNullOrEmpty(user.ProfilePhotoUrl))
                                {
                                    <img src="@user.ProfilePhotoUrl" alt="@user.Username" />
                                }
                                else
                                {
                                    <div class="default-avatar-small">@GetInitials(user.Username)</div>
                                }
                            </div>
                            <div class="user-info">
                                <a href="/user/@user.Username" class="user-link">@user.Username</a>
                                <span class="user-stats">@user.EntryCount entry</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="empty-state">henüz kimse yok.</p>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string username { get; set; } = "";
    
    private UserProfileModel currentUser = new();
    private List<EntryModel> userEntries = new();
    private List<EntryModel> favoriteEntries = new();
    private List<UserModel> followModalUsers = new();
    
    private string activeTab = "entries";
    private bool showPhotoUpload = false;
    private bool isUploadingPhoto = false;
    private bool isEditingAbout = false;
    private bool isSavingAbout = false;
    private bool showFollowModal = false;
    private string followModalTitle = "";
    private string aboutText = "";
    private IBrowserFile? selectedPhoto;
    private bool isFollowing = false;
    private string relationshipStatus = "none"; // none, friend, request_sent, request_received
    private int? pendingRequestId = null;
    private bool isLoadingProfile = false;
    private bool userNotFound = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("📄 Profile sayfası yükleniyor...");
        
        // Önce AuthService'i initialize et
        await AuthService.InitializeAsync();
        
        // Eğer username parametresi yoksa, kendi profiline yönlendir
        if (string.IsNullOrEmpty(username) && AuthService.IsAuthenticated)
        {
            username = AuthService.CurrentUser?.Username ?? "";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Parameter değiştiğinde profili yeniden yükle
        if (!string.IsNullOrEmpty(username))
        {
            Logger.LogInformation($"📄 Parameter değişti, profil yeniden yükleniyor: {username}");
            currentUser = new UserProfileModel(); // Reset user data
            await LoadUserProfile();
            await LoadUserEntries();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // localStorage'dan kullanıcı bilgilerini yükle
            await AuthService.LoadFromStorageAsync();
            
            Logger.LogInformation($"🔐 AuthService.IsAuthenticated: {AuthService.IsAuthenticated}");
            Logger.LogInformation($"👤 AuthService.CurrentUser: {AuthService.CurrentUser?.Username ?? "null"}");
            
            // Eğer giriş yapılmamışsa login sayfasına yönlendir
            if (!AuthService.IsAuthenticated)
            {
                Logger.LogWarning("❌ Kullanıcı giriş yapmamış, login sayfasına yönlendiriliyor");
                Navigation.NavigateTo("/login");
                return;
            }

            Logger.LogInformation("✅ Kullanıcı giriş yapmış, profil yükleniyor");
            await LoadUserProfile();
            await LoadUserEntries();
            StateHasChanged();
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            isLoadingProfile = true;
            userNotFound = false;
            Logger.LogInformation($"📄 Profile API çağrısı başlatılıyor - Username: {username}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.GetAsync($"https://apiservice/api/profile/{username}");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);
                
                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    if (apiResponse.TryGetProperty("user", out var userElement))
                    {
                        currentUser = new UserProfileModel
                        {
                            Id = userElement.GetProperty("id").GetInt32(),
                            Username = userElement.GetProperty("username").GetString() ?? "",
                            ProfilePhotoUrl = userElement.TryGetProperty("profilePhotoUrl", out var photoElement) ? photoElement.GetString() : null,
                            CreatedAt = userElement.GetProperty("createdAt").GetDateTime(),
                            EntryCount = userElement.GetProperty("entryCount").GetInt32(),
                            FollowerCount = userElement.GetProperty("followerCount").GetInt32(),
                            FollowingCount = userElement.GetProperty("followingCount").GetInt32(),
                            About = userElement.TryGetProperty("about", out var aboutElement) ? aboutElement.GetString() : null
                        };
                        
                        aboutText = currentUser.About ?? "";
                        Logger.LogInformation($"✅ Profile API'den yüklendi: {currentUser.Username}");
                        
                        // İlişki durumunu kontrol et (sadece başka kullanıcılar için)
                        if (!IsOwnProfile() && AuthService.IsAuthenticated)
                        {
                            await LoadRelationshipStatus();
                        }
                        
                        // User entries'i yükle
                        await LoadUserEntries();
                    }
                }
            }
            else
            {
                Logger.LogError($"❌ Profile API hatası - Status: {response.StatusCode}");
                if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    Logger.LogWarning($"⚠️ Kullanıcı bulunamadı: {username}");
                    userNotFound = true;
                }
                currentUser = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ Profil yükleme hatası: {ex.Message}");
            currentUser = null;
        }
        finally
        {
            isLoadingProfile = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserEntries()
    {
        if (currentUser == null) return;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.GetAsync($"https://apiservice/api/entries?userId={currentUser.Id}&pageSize=20");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var entries = JsonSerializer.Deserialize<JsonElement>(content);
                
                userEntries.Clear();
                foreach (var entryElement in entries.EnumerateArray())
                {
                    var entry = new EntryModel
                    {
                        Id = entryElement.GetProperty("id").GetInt32(),
                        Content = entryElement.GetProperty("content").GetString() ?? "",
                        ContentHtml = entryElement.TryGetProperty("contentHtml", out var contentHtmlElement) ? contentHtmlElement.GetString() : null,
                        CreatedAt = entryElement.GetProperty("createdAt").GetDateTime(),
                        FavoriteCount = entryElement.GetProperty("favoriteCount").GetInt32(),
                        TopicTitle = entryElement.GetProperty("topic").GetProperty("title").GetString() ?? "",
                        TopicSlug = entryElement.GetProperty("topic").GetProperty("slug").GetString() ?? "",
                        VoteCount = 0 // Vote system henüz yok
                    };
                    userEntries.Add(entry);
                }
                
                Logger.LogInformation($"✅ {userEntries.Count} user entry yüklendi");
            }
            else
            {
                Logger.LogError($"❌ User entries API hatası: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ User entries yükleme hatası: {ex.Message}");
        }
    }

    private async Task LoadUserFavorites()
    {
        if (currentUser == null) return;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.GetAsync($"https://apiservice/api/favorites/user/{currentUser.Id}?pageSize=20");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var favorites = JsonSerializer.Deserialize<JsonElement>(content);
                
                favoriteEntries.Clear();
                foreach (var favoriteElement in favorites.EnumerateArray())
                {
                    var entryData = favoriteElement.GetProperty("entry");
                    var entry = new EntryModel
                    {
                        Id = entryData.GetProperty("id").GetInt32(),
                        Content = entryData.GetProperty("content").GetString() ?? "",
                        ContentHtml = entryData.TryGetProperty("contentHtml", out var contentHtmlElement) ? contentHtmlElement.GetString() : null,
                        CreatedAt = entryData.GetProperty("createdAt").GetDateTime(),
                        FavoriteCount = entryData.GetProperty("favoriteCount").GetInt32(),
                        TopicTitle = entryData.GetProperty("topic").GetProperty("title").GetString() ?? "",
                        TopicSlug = entryData.GetProperty("topic").GetProperty("slug").GetString() ?? "",
                        AuthorUsername = entryData.GetProperty("createdBy").GetString() ?? "",
                        VoteCount = 0 // Vote system henüz yok
                    };
                    favoriteEntries.Add(entry);
                }
                
                Logger.LogInformation($"✅ {favoriteEntries.Count} favorite entry yüklendi");
            }
            else
            {
                Logger.LogError($"❌ User favorites API hatası: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ User favorites yükleme hatası: {ex.Message}");
        }
    }

    private async Task SwitchTab(string tab)
    {
        activeTab = tab;
        
        if (tab == "entries" && !userEntries.Any())
        {
            await LoadUserEntries();
        }
        else if (tab == "favorites" && !favoriteEntries.Any())
        {
            await LoadUserFavorites();
        }
        
        StateHasChanged();
    }

    private void OpenPhotoUpload()
    {
        showPhotoUpload = true;
    }

    private void ClosePhotoUpload()
    {
        showPhotoUpload = false;
        selectedPhoto = null;
    }

    private void HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        selectedPhoto = e.File;
    }

    private async Task UploadPhoto()
    {
        if (selectedPhoto == null || !IsOwnProfile()) return;

        isUploadingPhoto = true;
        try
        {
            Logger.LogInformation($"📷 Profil fotoğrafı yükleme başlatılıyor: {selectedPhoto.Name}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // JWT token'ı header'a ekle
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            
            // MultipartFormDataContent oluştur
            using var formData = new MultipartFormDataContent();
            using var fileStream = selectedPhoto.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB limit
            using var streamContent = new StreamContent(fileStream);
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedPhoto.ContentType);
            formData.Add(streamContent, "photo", selectedPhoto.Name);
            
            var response = await httpClient.PostAsync("https://apiservice/api/profile/upload-photo", formData);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);
                
                if (apiResponse.TryGetProperty("photoUrl", out var photoElement))
                {
                    currentUser.ProfilePhotoUrl = photoElement.GetString();
                    Logger.LogInformation($"✅ Profil fotoğrafı yüklendi: {selectedPhoto.Name}");
                }
                
                ClosePhotoUpload();
            }
            else
            {
                Logger.LogError($"❌ Profil fotoğrafı yükleme hatası - Status: {response.StatusCode}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"❌ Error Content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ Profil fotoğrafı yükleme hatası: {ex.Message}");
        }
        finally
        {
            isUploadingPhoto = false;
        }
    }

    private void StartEditAbout()
    {
        isEditingAbout = true;
        aboutText = currentUser.About ?? "";
    }

    private void CancelEditAbout()
    {
        isEditingAbout = false;
        aboutText = currentUser.About ?? "";
    }

    private async Task SaveAbout()
    {
        if (!IsOwnProfile()) return;
        
        isSavingAbout = true;
        try
        {
            Logger.LogInformation("📝 About güncelleme API çağrısı başlatılıyor");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var updateRequest = new { About = aboutText };
            var json = JsonSerializer.Serialize(updateRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            // JWT token'ı header'a ekle
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            
            var response = await httpClient.PutAsync("https://apiservice/api/profile/update", content);
            
            if (response.IsSuccessStatusCode)
            {
                currentUser.About = aboutText;
                isEditingAbout = false;
                Logger.LogInformation("✅ About başarıyla güncellendi");
            }
            else
            {
                Logger.LogError($"❌ About güncelleme hatası - Status: {response.StatusCode}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"❌ Error Content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ About güncelleme hatası: {ex.Message}");
        }
        finally
        {
            isSavingAbout = false;
        }
    }

    private async Task ShowFollowers()
    {
        followModalTitle = "takipçilerim";
        // API çağrısı ile takipçi listesi yüklenecek
        followModalUsers = new List<UserModel>
        {
            new() { Username = "frontend_dev", EntryCount = 23, ProfilePhotoUrl = "" },
            new() { Username = "backend_master", EntryCount = 156, ProfilePhotoUrl = "" }
        };
        showFollowModal = true;
    }

    private async Task ShowFollowing()
    {
        followModalTitle = "takip ettiklerim";
        // API çağrısı ile takip edilen liste yüklenecek
        followModalUsers = new List<UserModel>
        {
            new() { Username = "code_guru", EntryCount = 89, ProfilePhotoUrl = "" },
            new() { Username = "tech_writer", EntryCount = 67, ProfilePhotoUrl = "" }
        };
        showFollowModal = true;
    }

    private async Task ShowEntries()
    {
        activeTab = "entries";
    }

    private void CloseFollowModal()
    {
        showFollowModal = false;
        followModalUsers.Clear();
    }

    private async Task RemoveFromFavorites(int entryId)
    {
        Logger.LogInformation($"🗑️ RemoveFromFavorites çağrıldı - EntryId: {entryId}");
        
        if (!AuthService.IsAuthenticated || AuthService.CurrentUser == null)
        {
            Logger.LogWarning("❌ Kullanıcı giriş yapmamış veya null");
            return;
        }
        
        Logger.LogInformation($"👤 Kullanıcı: {AuthService.CurrentUser.Username} (ID: {AuthService.CurrentUser.Id})");
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // Request body olarak JSON gönder
            var requestObj = new { UserId = AuthService.CurrentUser.Id, EntryId = entryId };
            var json = JsonSerializer.Serialize(requestObj);
            Logger.LogInformation($"📤 API'ye gönderilen JSON: {json}");
            
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            
            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "https://apiservice/api/favorites")
            {
                Content = content
            };
            
            Logger.LogInformation("📡 API çağrısı başlatılıyor...");
            var response = await httpClient.SendAsync(requestMessage);
            Logger.LogInformation($"📨 API Response Status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                // Local state'i güncelle
                var oldCount = favoriteEntries.Count;
                favoriteEntries = favoriteEntries.Where(e => e.Id != entryId).ToList();
                var newCount = favoriteEntries.Count;
                
                Logger.LogInformation($"✅ Entry {entryId} favorilerden çıkarıldı - Liste: {oldCount} -> {newCount}");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"❌ Favori çıkarma API hatası: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ Favori çıkarma hatası: {ex.Message}");
            Logger.LogError($"❌ Stack trace: {ex.StackTrace}");
        }
    }

    private string GetInitials(string username)
    {
        if (string.IsNullOrEmpty(username)) return "?";
        return username.Length >= 2 ? username.Substring(0, 2).ToUpper() : username.ToUpper();
    }

    private bool IsOwnProfile()
    {
        return AuthService.IsAuthenticated && 
               AuthService.CurrentUser?.Username?.Equals(username, StringComparison.OrdinalIgnoreCase) == true;
    }

    private string GetPageTitle()
    {
        if (string.IsNullOrEmpty(username))
            return "Profil";
        
        return IsOwnProfile() ? "Profilim" : $"{username} - Profil";
    }

    private async Task ToggleFollow()
    {
        isFollowing = !isFollowing;
        // API çağrısı burada yapılacak
        Logger.LogInformation($"{username} kullanıcısı {(isFollowing ? "takip edildi" : "takibi bırakıldı")}");
    }

    private async Task SendMessage()
    {
        // Mesaj sayfasına yönlendirme
        Navigation.NavigateTo($"/messages/{username}");
    }

    private async Task LoadRelationshipStatus()
    {
        try
        {
            if (currentUser == null) return;
            
            Logger.LogInformation($"👥 İlişki durumu kontrol ediliyor - {username}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // JWT token'ı header'a ekle
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            
            var response = await httpClient.GetAsync($"https://apiservice/api/user/{currentUser.Id}/relationship");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);
                
                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    if (apiResponse.TryGetProperty("relationship", out var relationshipElement))
                    {
                        relationshipStatus = relationshipElement.GetString() ?? "none";
                        
                        if (relationshipStatus == "request_received" && apiResponse.TryGetProperty("requestId", out var requestIdElement))
                        {
                            pendingRequestId = requestIdElement.GetInt32();
                        }
                        
                        Logger.LogInformation($"✅ İlişki durumu: {relationshipStatus}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ İlişki durumu yükleme hatası: {ex.Message}");
        }
    }

    private async Task SendFriendRequest()
    {
        try
        {
            if (currentUser == null) return;
            
            Logger.LogInformation($"👋 Arkadaşlık isteği gönderiliyor - {username}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // JWT token'ı header'a ekle
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            
            var requestData = new { ReceiverId = currentUser.Id };
            var json = JsonSerializer.Serialize(requestData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await httpClient.PostAsync("https://apiservice/api/friends/send-request", content);
            
            if (response.IsSuccessStatusCode)
            {
                relationshipStatus = "request_sent";
                Logger.LogInformation($"✅ Arkadaşlık isteği gönderildi - {username}");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"❌ Arkadaşlık isteği gönderme hatası: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ Arkadaşlık isteği gönderme hatası: {ex.Message}");
        }
    }

    private async Task AcceptFriendRequest()
    {
        try
        {
            if (pendingRequestId == null) return;
            
            Logger.LogInformation($"✅ Arkadaşlık isteği kabul ediliyor - RequestId: {pendingRequestId}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // JWT token'ı header'a ekle
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            
            var response = await httpClient.PostAsync($"https://apiservice/api/friends/{pendingRequestId}/accept", null);
            
            if (response.IsSuccessStatusCode)
            {
                relationshipStatus = "friend";
                pendingRequestId = null;
                // Takipçi sayısını artır
                if (currentUser != null)
                {
                    currentUser.FollowerCount++;
                }
                Logger.LogInformation($"✅ Arkadaşlık isteği kabul edildi - {username}");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"❌ Arkadaşlık isteği kabul etme hatası: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ Arkadaşlık isteği kabul etme hatası: {ex.Message}");
        }
    }

    private async Task RejectFriendRequest()
    {
        try
        {
            if (pendingRequestId == null) return;
            
            Logger.LogInformation($"❌ Arkadaşlık isteği reddediliyor - RequestId: {pendingRequestId}");
            
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // JWT token'ı header'a ekle
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }
            
            var response = await httpClient.PostAsync($"https://apiservice/api/friends/{pendingRequestId}/reject", null);
            
            if (response.IsSuccessStatusCode)
            {
                relationshipStatus = "none";
                pendingRequestId = null;
                Logger.LogInformation($"❌ Arkadaşlık isteği reddedildi - {username}");
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"❌ Arkadaşlık isteği reddetme hatası: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"❌ Arkadaşlık isteği reddetme hatası: {ex.Message}");
        }
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    public class UserProfileModel
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string? ProfilePhotoUrl { get; set; }
        public DateTime CreatedAt { get; set; }
        public int EntryCount { get; set; }
        public int FollowerCount { get; set; }
        public int FollowingCount { get; set; }
        public string? About { get; set; }
    }

    public class EntryModel
    {
        public int Id { get; set; }
        public string TopicTitle { get; set; } = "";
        public string TopicSlug { get; set; } = "";
        public string Content { get; set; } = "";
        public string? ContentHtml { get; set; }
        public string? AuthorUsername { get; set; }
        public DateTime CreatedAt { get; set; }
        public int VoteCount { get; set; }
        public int FavoriteCount { get; set; }
    }

    public class UserModel
    {
        public string Username { get; set; } = "";
        public string? ProfilePhotoUrl { get; set; }
        public int EntryCount { get; set; }
    }
}

