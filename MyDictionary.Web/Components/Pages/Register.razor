@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Register> Logger

<PageTitle>Kayıt Ol - MyDictionary</PageTitle>

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <h2>MyDictionary'ye Katılın</h2>
            <p>Bilgi paylaşım topluluğumuzun bir parçası olun</p>
        </div>

        <EditForm Model="@registerModel" OnSubmit="@HandleRegister" FormName="RegisterForm">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="username">Kullanıcı Adı</label>
                <InputText @bind-Value="registerModel.Username" 
                          class="form-control" 
                          id="username" 
                          placeholder="Kullanıcı adınızı girin" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>

            <div class="form-group">
                <label for="email">E-posta Adresi</label>
                <InputText @bind-Value="registerModel.Email" 
                          class="form-control" 
                          id="email" 
                          type="email"
                          placeholder="E-posta adresinizi girin" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-row">
                <div class="form-group half">
                    <label for="birthDate">Doğum Tarihi</label>
                    <InputDate @bind-Value="registerModel.BirthDate" 
                              class="form-control" 
                              id="birthDate" />
                    <ValidationMessage For="@(() => registerModel.BirthDate)" />
                </div>

                <div class="form-group half">
                    <label for="gender">Cinsiyet</label>
                    <InputSelect @bind-Value="registerModel.Gender" 
                                class="form-control" 
                                id="gender">
                        <option value="">Seçin</option>
                        <option value="1">Erkek</option>
                        <option value="2">Kadın</option>
                        <option value="3">Belirtmek istemiyorum</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => registerModel.Gender)" />
                </div>
            </div>

            <div class="form-group">
                <label for="password">Şifre</label>
                <InputText @bind-Value="registerModel.Password" 
                          class="form-control" 
                          id="password" 
                          type="password"
                          placeholder="Güçlü bir şifre oluşturun" />
                <ValidationMessage For="@(() => registerModel.Password)" />
                <small class="password-hint">En az 6 karakter, büyük/küçük harf ve rakam içermelidir</small>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Şifre Tekrar</label>
                <InputText @bind-Value="registerModel.ConfirmPassword" 
                          class="form-control" 
                          id="confirmPassword" 
                          type="password"
                          placeholder="Şifrenizi tekrar girin" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <div class="form-group checkbox-group">
                <label class="checkbox-label">
                    <InputCheckbox @bind-Value="registerModel.AcceptedUserAgreement" />
                    <span class="checkmark"></span>
                    <a href="/user-agreement" target="_blank" class="agreement-link">Kullanıcı Sözleşmesi</a>'ni okudum ve kabul ediyorum
                </label>
                <ValidationMessage For="@(() => registerModel.AcceptedUserAgreement)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-error">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">
                    @successMessage
                </div>
            }

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner"></span>
                    <span>Kayıt Oluşturuluyor...</span>
                }
                else
                {
                    <span>Kayıt Ol</span>
                }
            </button>
        </EditForm>

        <div class="register-footer">
            <p>Zaten hesabınız var mı? <a href="/login">Giriş yapın</a></p>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private RegisterModel registerModel { get; set; } = new();
    
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    public class RegisterModel
    {
        [Required(ErrorMessage = "Kullanıcı adı gereklidir")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Kullanıcı adı 3-50 karakter arasında olmalıdır")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "E-posta adresi gereklidir")]
        [EmailAddress(ErrorMessage = "Geçerli bir e-posta adresi girin")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Doğum tarihi gereklidir")]
        public DateTime BirthDate { get; set; } = DateTime.Now.AddYears(-18);

        [Required(ErrorMessage = "Cinsiyet seçimi gereklidir")]
        [Range(1, 3, ErrorMessage = "Lütfen cinsiyetinizi seçin")]
        public int Gender { get; set; } = 1; // Default: Male

        [Required(ErrorMessage = "Şifre gereklidir")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Şifre en az 6 karakter olmalıdır")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Şifre tekrarı gereklidir")]
        [Compare("Password", ErrorMessage = "Şifreler eşleşmiyor")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Kullanıcı sözleşmesini kabul etmelisiniz")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "Kullanıcı sözleşmesini kabul etmelisiniz")]
        public bool AcceptedUserAgreement { get; set; }
    }

    private async Task HandleRegister(EditContext editContext)
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            Logger.LogInformation("🚀 KAYIT İŞLEMİ BAŞLADI");
            Logger.LogInformation($"📝 Form Verileri - Username: '{registerModel.Username}', Email: '{registerModel.Email}', Gender: {registerModel.Gender}, BirthDate: {registerModel.BirthDate}, Agreement: {registerModel.AcceptedUserAgreement}");
            
            // Önce validation kontrolü yap
            if (!editContext.Validate())
            {
                Logger.LogWarning("❌ VALİDASYON HATASI - Form validation başarısız");
                var validationMessages = editContext.GetValidationMessages().ToList();
                foreach (var message in validationMessages)
                {
                    Logger.LogWarning($"❗ Validation Error: {message}");
                }
                isLoading = false;
                errorMessage = "Lütfen tüm alanları doğru şekilde doldurun.";
                return;
            }
            
            Logger.LogInformation("✅ VALİDASYON BAŞARILI - Tüm alanlar geçerli");
            // Yaş kontrolü
            var age = DateTime.Now.Year - registerModel.BirthDate.Year;
            if (registerModel.BirthDate > DateTime.Now.AddYears(-age)) age--;

            Logger.LogInformation($"👤 Yaş Kontrolü - Hesaplanan yaş: {age}");
            
            if (age < 13)
            {
                Logger.LogWarning($"❌ YAŞ KONTROLÜ BAŞARISIZ - Yaş: {age}");
                errorMessage = "13 yaşından küçük kullanıcılar kayıt olamaz.";
                return;
            }

            Logger.LogInformation("🌐 API ÇAĞRISI BAŞLADI");
            
            // API çağrısı
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            var registerDto = new
            {
                Username = registerModel.Username,
                Email = registerModel.Email,
                Password = registerModel.Password,
                BirthDate = registerModel.BirthDate,
                Gender = registerModel.Gender,
                AcceptedUserAgreement = registerModel.AcceptedUserAgreement
            };

            var json = JsonSerializer.Serialize(registerDto);
            Logger.LogInformation($"📤 API JSON: {json}");
            
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            try
            {
                // Aspire service discovery ile API URL'i
                Logger.LogInformation("🔗 API URL: https://apiservice/api/auth/register");
                var response = await httpClient.PostAsync("https://apiservice/api/auth/register", content);
                var responseContent = await response.Content.ReadAsStringAsync();
                
                Logger.LogInformation($"📥 API Response Status: {response.StatusCode}");
                Logger.LogInformation($"📥 API Response Content: {responseContent}");

                if (response.IsSuccessStatusCode)
                {
                    Logger.LogInformation("🎉 KAYIT BAŞARILI!");
                    successMessage = "🎉 Kayıt başarıyla tamamlandı! Artık giriş yapabilirsiniz.";
                    
                    // Form'u temizle
                    registerModel = new RegisterModel();
                    StateHasChanged();
                }
                else
                {
                    Logger.LogError($"❌ API HATASI - Status: {response.StatusCode}");
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);
                        if (errorResponse.TryGetProperty("message", out var messageElement))
                        {
                            var apiErrorMessage = messageElement.GetString() ?? "Kayıt sırasında bir hata oluştu.";
                            Logger.LogError($"❌ API Error Message: {apiErrorMessage}");
                            errorMessage = apiErrorMessage;
                        }
                        else
                        {
                            Logger.LogError("❌ API Error: Message property bulunamadı");
                            errorMessage = "Kayıt sırasında bir hata oluştu. Lütfen tekrar deneyin.";
                        }
                    }
                    catch (Exception jsonEx)
                    {
                        Logger.LogError($"❌ JSON Parse Error: {jsonEx.Message}");
                        errorMessage = "Kayıt sırasında bir hata oluştu. Lütfen tekrar deneyin.";
                    }
                }
            }
            catch (HttpRequestException httpEx)
            {
                Logger.LogError($"❌ HTTP İSTEK HATASI: {httpEx.Message}");
                errorMessage = $"Bağlantı hatası: {httpEx.Message}";
            }
            catch (TaskCanceledException timeoutEx)
            {
                Logger.LogError($"❌ TIMEOUT HATASI: {timeoutEx.Message}");
                errorMessage = "İstek zaman aşımına uğradı. Lütfen tekrar deneyin.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"💥 GENEL HATA: {ex.Message}");
            Logger.LogError($"💥 Stack Trace: {ex.StackTrace}");
            errorMessage = $"Beklenmeyen hata: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            Logger.LogInformation("🏁 KAYIT İŞLEMİ TAMAMLANDI");
        }
    }
}