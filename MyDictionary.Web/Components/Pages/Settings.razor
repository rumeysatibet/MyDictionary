@page "/settings"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using MyDictionary.Web.Services
@inject ILogger<Settings> Logger
@inject AuthenticationStateService AuthService
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Ayarlar - MyDictionary</PageTitle>

<div class="settings-container">
    <div class="settings-layout">
        <!-- Sol Panel - Ayar Kategorileri -->
        <div class="settings-sidebar">
            <div class="settings-nav">
                <h3>Ayarlar</h3>
                <div class="nav-items">
                    <button class="nav-item @(activeTab == "profile" ? "active" : "")" @onclick="@(() => SetActiveTab("profile"))">
                        <span class="nav-icon">üë§</span>
                        Profil Bilgileri
                    </button>
                    <button class="nav-item @(activeTab == "account" ? "active" : "")" @onclick="@(() => SetActiveTab("account"))">
                        <span class="nav-icon">üîê</span>
                        Hesap G√ºvenliƒüi
                    </button>
                    <button class="nav-item @(activeTab == "privacy" ? "active" : "")" @onclick="@(() => SetActiveTab("privacy"))">
                        <span class="nav-icon">üîí</span>
                        Gizlilik
                    </button>
                    <button class="nav-item @(activeTab == "notifications" ? "active" : "")" @onclick="@(() => SetActiveTab("notifications"))">
                        <span class="nav-icon">üîî</span>
                        Bildirimler
                    </button>
                    <button class="nav-item @(activeTab == "blocked" ? "active" : "")" @onclick="@(() => SetActiveTab("blocked"))">
                        <span class="nav-icon">üö´</span>
                        Engellenen Kullanƒ±cƒ±lar
                    </button>
                    <button class="nav-item danger @(activeTab == "danger" ? "active" : "")" @onclick="@(() => SetActiveTab("danger"))">
                        <span class="nav-icon">‚ö†Ô∏è</span>
                        Tehlikeli B√∂lge
                    </button>
                </div>
            </div>
        </div>

        <!-- Saƒü Panel - Ayar ƒ∞√ßeriƒüi -->
        <div class="settings-content">
            @if (activeTab == "profile")
            {
                <div class="settings-section">
                    <div class="section-header">
                        <h2>Profil Bilgileri</h2>
                        <p>Profil bilgilerinizi g√ºncelleyin</p>
                    </div>

                    <EditForm Model="profileModel" OnValidSubmit="UpdateProfile">
                        <DataAnnotationsValidator />
                        
                        <div class="form-group">
                            <label for="username">Kullanƒ±cƒ± Adƒ±</label>
                            <InputText id="username" @bind-Value="profileModel.Username" class="form-control" readonly />
                            <small class="form-text">Kullanƒ±cƒ± adƒ± deƒüi≈ütirilemez</small>
                        </div>

                        <div class="form-group">
                            <label for="email">E-posta Adresi</label>
                            <InputText id="email" @bind-Value="profileModel.Email" class="form-control" />
                            <ValidationMessage For="() => profileModel.Email" />
                        </div>

                        <div class="form-group">
                            <label for="bio">Hakkƒ±nda</label>
                            <InputTextArea id="bio" @bind-Value="profileModel.Bio" class="form-control" rows="3" placeholder="Kendiniz hakkƒ±nda kƒ±sa bir a√ßƒ±klama yazƒ±n..." />
                            <small class="form-text">Maksimum 500 karakter</small>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn-primary" disabled="@isUpdatingProfile">
                                @if (isUpdatingProfile)
                                {
                                    <span>G√ºncellenƒ±yor...</span>
                                }
                                else
                                {
                                    <span>Profili G√ºncelle</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
            else if (activeTab == "account")
            {
                <div class="settings-section">
                    <div class="section-header">
                        <h2>Hesap G√ºvenliƒüi</h2>
                        <p>≈ûifrenizi ve hesap g√ºvenliƒüinizi y√∂netin</p>
                    </div>

                    <!-- ≈ûifre Deƒüi≈ütirme -->
                    <div class="security-card">
                        <div class="card-header">
                            <h3>≈ûifre Deƒüi≈ütir</h3>
                            <p>Hesabƒ±nƒ±zƒ±n g√ºvenliƒüi i√ßin d√ºzenli olarak ≈üifrenizi deƒüi≈ütirin</p>
                        </div>
                        
                        <EditForm Model="passwordModel" OnValidSubmit="ChangePassword">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="currentPassword">Mevcut ≈ûifre</label>
                                <InputText id="currentPassword" type="password" @bind-Value="passwordModel.CurrentPassword" class="form-control" />
                                <ValidationMessage For="() => passwordModel.CurrentPassword" />
                            </div>

                            <div class="form-group">
                                <label for="newPassword">Yeni ≈ûifre</label>
                                <InputText id="newPassword" type="password" @bind-Value="passwordModel.NewPassword" class="form-control" />
                                <ValidationMessage For="() => passwordModel.NewPassword" />
                            </div>

                            <div class="form-group">
                                <label for="confirmPassword">Yeni ≈ûifre Tekrar</label>
                                <InputText id="confirmPassword" type="password" @bind-Value="passwordModel.ConfirmPassword" class="form-control" />
                                <ValidationMessage For="() => passwordModel.ConfirmPassword" />
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-primary" disabled="@isChangingPassword">
                                    @if (isChangingPassword)
                                    {
                                        <span>Deƒüi≈ütiriliyor...</span>
                                    }
                                    else
                                    {
                                        <span>≈ûifreyi Deƒüi≈ütir</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>

                    <!-- E-posta Deƒüi≈ütirme -->
                    <div class="security-card">
                        <div class="card-header">
                            <h3>E-posta Deƒüi≈ütir</h3>
                            <p>Hesabƒ±nƒ±zla ili≈ükili e-posta adresini deƒüi≈ütirin</p>
                        </div>
                        
                        <EditForm Model="emailModel" OnValidSubmit="ChangeEmail">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="currentEmail">Mevcut E-posta</label>
                                <InputText id="currentEmail" @bind-Value="emailModel.CurrentEmail" class="form-control" readonly />
                            </div>

                            <div class="form-group">
                                <label for="newEmail">Yeni E-posta</label>
                                <InputText id="newEmail" type="email" @bind-Value="emailModel.NewEmail" class="form-control" />
                                <ValidationMessage For="() => emailModel.NewEmail" />
                            </div>

                            <div class="form-group">
                                <label for="passwordForEmail">≈ûifre</label>
                                <InputText id="passwordForEmail" type="password" @bind-Value="emailModel.Password" class="form-control" />
                                <ValidationMessage For="() => emailModel.Password" />
                                <small class="form-text">G√ºvenlik i√ßin mevcut ≈üifrenizi girin</small>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-primary" disabled="@isChangingEmail">
                                    @if (isChangingEmail)
                                    {
                                        <span>Deƒüi≈ütiriliyor...</span>
                                    }
                                    else
                                    {
                                        <span>E-postayƒ± Deƒüi≈ütir</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
            else if (activeTab == "privacy")
            {
                <div class="settings-section">
                    <div class="section-header">
                        <h2>Gizlilik Ayarlarƒ±</h2>
                        <p>Profilinizin g√∂r√ºn√ºrl√ºƒü√ºn√º ve gizliliƒüinizi kontrol edin</p>
                    </div>

                    <EditForm Model="privacyModel" OnValidSubmit="UpdatePrivacySettings">
                        <div class="privacy-settings">
                            <div class="privacy-item">
                                <div class="privacy-info">
                                    <h3>Profil G√∂r√ºn√ºrl√ºƒü√º</h3>
                                    <p>Sadece arkada≈ülarƒ±nƒ±z profilinizi g√∂rebilir</p>
                                </div>
                                <div class="privacy-control">
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="privacyModel.IsProfilePrivate" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>

                            <div class="privacy-item">
                                <div class="privacy-info">
                                    <h3>Mesaj ƒ∞zinleri</h3>
                                    <p>Sadece arkada≈ülarƒ±nƒ±z size mesaj g√∂nderebilir</p>
                                </div>
                                <div class="privacy-control">
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="privacyModel.AllowMessagesFromFriendsOnly" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>

                            <div class="privacy-item">
                                <div class="privacy-info">
                                    <h3>Takip√ßi Listesi Gizliliƒüi</h3>
                                    <p>Takip√ßi ve takip listenizi gizle</p>
                                </div>
                                <div class="privacy-control">
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="privacyModel.HideFollowersList" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>

                            <div class="privacy-item">
                                <div class="privacy-info">
                                    <h3>√áevrimi√ßi Durumu</h3>
                                    <p>√áevrimi√ßi durumunuzu gizle</p>
                                </div>
                                <div class="privacy-control">
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="privacyModel.HideOnlineStatus" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>

                            <div class="privacy-item">
                                <div class="privacy-info">
                                    <h3>Entry Gizliliƒüi</h3>
                                    <p>Entry'lerinizi sadece arkada≈ülarƒ±nƒ±z g√∂rebilir</p>
                                </div>
                                <div class="privacy-control">
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="privacyModel.MakeEntriesPrivate" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn-primary" disabled="@isUpdatingPrivacy">
                                @if (isUpdatingPrivacy)
                                {
                                    <span>G√ºncelleniyor...</span>
                                }
                                else
                                {
                                    <span>Gizlilik Ayarlarƒ±nƒ± Kaydet</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
            else if (activeTab == "notifications")
            {
                <div class="settings-section">
                    <div class="section-header">
                        <h2>Bildirim Ayarlarƒ±</h2>
                        <p>Hangi bildirimleri almak istediƒüinizi se√ßin</p>
                    </div>

                    <EditForm Model="notificationModel" OnValidSubmit="UpdateNotificationSettings">
                        <div class="notification-settings">
                            <div class="notification-category">
                                <h3>Sosyal Etkile≈üimler</h3>
                                
                                <div class="notification-item">
                                    <div class="notification-info">
                                        <h4>Arkada≈ülƒ±k ƒ∞stekleri</h4>
                                        <p>Size arkada≈ülƒ±k isteƒüi g√∂nderildiƒüinde bildirim al</p>
                                    </div>
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="notificationModel.FriendRequests" />
                                        <span class="slider"></span>
                                    </label>
                                </div>

                                <div class="notification-item">
                                    <div class="notification-info">
                                        <h4>Yeni Takip√ßiler</h4>
                                        <p>Birisi sizi takip ettiƒüinde bildirim al</p>
                                    </div>
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="notificationModel.NewFollowers" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>

                            <div class="notification-category">
                                <h3>Mesajlar</h3>
                                
                                <div class="notification-item">
                                    <div class="notification-info">
                                        <h4>Yeni Mesajlar</h4>
                                        <p>Size mesaj g√∂nderildiƒüinde bildirim al</p>
                                    </div>
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="notificationModel.NewMessages" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>

                            <div class="notification-category">
                                <h3>Entry Etkile≈üimleri</h3>
                                
                                <div class="notification-item">
                                    <div class="notification-info">
                                        <h4>Entry Beƒüenileri</h4>
                                        <p>Entry'niz beƒüenildiƒüinde bildirim al</p>
                                    </div>
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="notificationModel.EntryLikes" />
                                        <span class="slider"></span>
                                    </label>
                                </div>

                                <div class="notification-item">
                                    <div class="notification-info">
                                        <h4>Entry Yorumlarƒ±</h4>
                                        <p>Entry'nize yorum yapƒ±ldƒ±ƒüƒ±nda bildirim al</p>
                                    </div>
                                    <label class="toggle-switch">
                                        <InputCheckbox @bind-Value="notificationModel.EntryComments" />
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn-primary" disabled="@isUpdatingNotifications">
                                @if (isUpdatingNotifications)
                                {
                                    <span>G√ºncelleniyor...</span>
                                }
                                else
                                {
                                    <span>Bildirim Ayarlarƒ±nƒ± Kaydet</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
            else if (activeTab == "blocked")
            {
                <div class="settings-section">
                    <div class="section-header">
                        <h2>Engellenen Kullanƒ±cƒ±lar</h2>
                        <p>Engellediƒüiniz kullanƒ±cƒ±larƒ± y√∂netin</p>
                    </div>

                    <div class="blocked-users">
                        @if (blockedUsers.Any())
                        {
                            @foreach (var user in blockedUsers)
                            {
                                <div class="blocked-user-item">
                                    <div class="user-info">
                                        <div class="user-avatar">
                                            @if (!string.IsNullOrEmpty(user.ProfilePhotoUrl))
                                            {
                                                <img src="/uploads/profiles/@user.ProfilePhotoUrl" alt="@user.Username" />
                                            }
                                            else
                                            {
                                                <div class="default-avatar">@GetUserInitials(user.Username)</div>
                                            }
                                        </div>
                                        <div class="user-details">
                                            <h4>@user.Username</h4>
                                            <p>@GetTimeAgo(user.BlockedAt) tarihinde engellendi</p>
                                        </div>
                                    </div>
                                    <button class="unblock-btn" @onclick="() => UnblockUser(user.Id)">
                                        Engeli Kaldƒ±r
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-blocked-users">
                                <span class="empty-icon">üö´</span>
                                <h3>Engellenen kullanƒ±cƒ± yok</h3>
                                <p>Hen√ºz hi√ß kullanƒ±cƒ± engellemediniz.</p>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (activeTab == "danger")
            {
                <div class="settings-section danger-zone">
                    <div class="section-header">
                        <h2>‚ö†Ô∏è Tehlikeli B√∂lge</h2>
                        <p>Bu i≈ülemler geri alƒ±namaz. Dikkatli olun!</p>
                    </div>

                    <!-- Hesap Silme -->
                    <div class="danger-card">
                        <div class="card-header">
                            <h3>üóëÔ∏è Hesabƒ± Sil</h3>
                            <p>Hesabƒ±nƒ±zƒ± kalƒ±cƒ± olarak silin. Bu i≈ülem geri alƒ±namaz!</p>
                        </div>
                        
                        <div class="danger-info">
                            <h4>Hesabƒ±nƒ±z silindiƒüinde:</h4>
                            <ul>
                                <li>üóÇÔ∏è T√ºm topic'leriniz ve entry'leriniz kalƒ±cƒ± olarak silinir</li>
                                <li>üíæ Favorileriniz ve t√ºm etkile≈üimleriniz silinir</li>
                                <li>üë• Arkada≈ülƒ±k baƒülantƒ±larƒ±nƒ±z ve mesajlarƒ±nƒ±z silinir</li>
                                <li>üìß E-posta adresiniz sistemden kaldƒ±rƒ±lƒ±r</li>
                                <li>üîÑ Bu i≈ülem geri alƒ±namaz!</li>
                            </ul>
                        </div>

                        <EditForm Model="deleteAccountModel" OnValidSubmit="DeleteAccount">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="deletePassword">≈ûifrenizi girin</label>
                                <InputText id="deletePassword" type="password" @bind-Value="deleteAccountModel.Password" class="form-control" placeholder="Hesabƒ± silmek i√ßin ≈üifrenizi girin" />
                                <ValidationMessage For="() => deleteAccountModel.Password" />
                                <small class="form-text">G√ºvenlik i√ßin mevcut ≈üifrenizi girin</small>
                            </div>

                            <div class="form-group">
                                <label class="checkbox-container">
                                    <InputCheckbox @bind-Value="confirmDelete" />
                                    <span class="checkmark"></span>
                                    Hesabƒ±mƒ± kalƒ±cƒ± olarak silmek istediƒüimi ve bu i≈ülemin geri alƒ±namaz olduƒüunu anlƒ±yorum
                                </label>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-danger" disabled="@(!confirmDelete || isDeletingAccount)">
                                    @if (isDeletingAccount)
                                    {
                                        <span>Hesap Siliniyor...</span>
                                    }
                                    else
                                    {
                                        <span>üóëÔ∏è Hesabƒ± Kalƒ±cƒ± Olarak Sil</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                    @message
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string activeTab = "profile";
    private string message = "";
    private bool isSuccess = false;
    
    private bool isUpdatingProfile = false;
    private bool isChangingPassword = false;
    private bool isChangingEmail = false;
    private bool isUpdatingPrivacy = false;
    private bool isUpdatingNotifications = false;
    private bool isDeletingAccount = false;
    private bool confirmDelete = false;

    private ProfileUpdateModel profileModel = new();
    private PasswordChangeModel passwordModel = new();
    private EmailChangeModel emailModel = new();
    private PrivacySettingsModel privacyModel = new();
    private NotificationSettingsModel notificationModel = new();
    private List<BlockedUserModel> blockedUsers = new();
    private DeleteAccountModel deleteAccountModel = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("‚öôÔ∏è Settings OnInitializedAsync ba≈ülatƒ±ldƒ±");
            
            // AuthService'i initialize et
            await AuthService.InitializeAsync();
            
            // Auth durumunu kontrol et
            if (!AuthService.IsAuthenticated)
            {
                Logger.LogWarning("‚ùå Settings: Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü");
                return; // Navigation'ƒ± OnAfterRenderAsync'e bƒ±rak
            }
            
            Logger.LogInformation("‚úÖ Settings: Kullanƒ±cƒ± doƒürulandƒ±");
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Settings OnInitializedAsync hatasƒ±: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation("‚öôÔ∏è Settings OnAfterRenderAsync ba≈ülatƒ±lƒ±yor");
                
                // AuthService'i y√ºkle
                await AuthService.LoadFromStorageAsync();
                
                if (!AuthService.IsAuthenticated)
                {
                    Logger.LogWarning("‚ùå Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü, login sayfasƒ±na y√∂nlendiriliyor");
                    Navigation.NavigateTo("/login", forceLoad: true);
                    return;
                }

                Logger.LogInformation("‚úÖ Kullanƒ±cƒ± doƒürulandƒ±, ayarlar y√ºkleniyor");
                await LoadUserSettings();
                StateHasChanged();
                Logger.LogInformation("‚úÖ Settings sayfasƒ± ba≈üarƒ±yla y√ºklendi");
            }
            catch (Exception ex)
            {
                Logger.LogError($"‚ùå Settings OnAfterRenderAsync hatasƒ±: {ex.Message}");
            }
        }
    }

    private async Task LoadUserSettings()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            // Kullanƒ±cƒ± bilgilerini y√ºkle
            if (AuthService.CurrentUser != null)
            {
                profileModel.Username = AuthService.CurrentUser.Username;
                profileModel.Email = AuthService.CurrentUser.Email ?? "";
                emailModel.CurrentEmail = AuthService.CurrentUser.Email ?? "";
            }

            // Gizlilik ayarlarƒ±nƒ± y√ºkle
            await LoadPrivacySettings();
            
            // Bildirim ayarlarƒ±nƒ± y√ºkle
            await LoadNotificationSettings();
            
            // Engellenen kullanƒ±cƒ±larƒ± y√ºkle
            await LoadBlockedUsers();
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Kullanƒ±cƒ± ayarlarƒ± y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private async Task LoadPrivacySettings()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.GetAsync("https://apiservice/api/user/privacy-settings");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);

                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    if (apiResponse.TryGetProperty("settings", out var settingsElement))
                    {
                        privacyModel.IsProfilePrivate = settingsElement.TryGetProperty("isProfilePrivate", out var privateElement) && privateElement.GetBoolean();
                        privacyModel.AllowMessagesFromFriendsOnly = settingsElement.TryGetProperty("allowMessagesFromFriendsOnly", out var messagesElement) && messagesElement.GetBoolean();
                        privacyModel.HideFollowersList = settingsElement.TryGetProperty("hideFollowersList", out var followersElement) && followersElement.GetBoolean();
                        privacyModel.HideOnlineStatus = settingsElement.TryGetProperty("hideOnlineStatus", out var onlineElement) && onlineElement.GetBoolean();
                        privacyModel.MakeEntriesPrivate = settingsElement.TryGetProperty("makeEntriesPrivate", out var entriesElement) && entriesElement.GetBoolean();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Gizlilik ayarlarƒ± y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private async Task LoadNotificationSettings()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.GetAsync("https://apiservice/api/user/notification-settings");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);

                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    if (apiResponse.TryGetProperty("settings", out var settingsElement))
                    {
                        notificationModel.FriendRequests = settingsElement.TryGetProperty("friendRequests", out var friendElement) && friendElement.GetBoolean();
                        notificationModel.NewFollowers = settingsElement.TryGetProperty("newFollowers", out var followElement) && followElement.GetBoolean();
                        notificationModel.NewMessages = settingsElement.TryGetProperty("newMessages", out var messageElement) && messageElement.GetBoolean();
                        notificationModel.EntryLikes = settingsElement.TryGetProperty("entryLikes", out var likeElement) && likeElement.GetBoolean();
                        notificationModel.EntryComments = settingsElement.TryGetProperty("entryComments", out var commentElement) && commentElement.GetBoolean();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Bildirim ayarlarƒ± y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private async Task LoadBlockedUsers()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.GetAsync("https://apiservice/api/user/blocked-users");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<JsonElement>(content);

                if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    blockedUsers.Clear();
                    if (apiResponse.TryGetProperty("users", out var usersElement))
                    {
                        foreach (var userElement in usersElement.EnumerateArray())
                        {
                            var user = new BlockedUserModel
                            {
                                Id = userElement.GetProperty("id").GetInt32(),
                                Username = userElement.GetProperty("username").GetString() ?? "",
                                ProfilePhotoUrl = userElement.TryGetProperty("profilePhotoUrl", out var photoElement) ? photoElement.GetString() : null,
                                BlockedAt = userElement.GetProperty("blockedAt").GetDateTime()
                            };
                            blockedUsers.Add(user);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Engellenen kullanƒ±cƒ±lar y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        message = "";
        StateHasChanged();
    }

    private async Task UpdateProfile()
    {
        if (isUpdatingProfile) return;
        
        isUpdatingProfile = true;
        message = "";
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var updateRequest = new { 
                Email = profileModel.Email,
                Bio = profileModel.Bio 
            };
            var json = JsonSerializer.Serialize(updateRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PutAsync("https://apiservice/api/user/profile", content);
            if (response.IsSuccessStatusCode)
            {
                var successContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(successContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "Profil bilgileriniz ba≈üarƒ±yla g√ºncellendi!";
                    }
                    else
                    {
                        message = "Profil bilgileriniz ba≈üarƒ±yla g√ºncellendi!";
                    }
                }
                catch
                {
                    message = "Profil bilgileriniz ba≈üarƒ±yla g√ºncellendi!";
                }
                isSuccess = true;
                
                // AuthService'deki kullanƒ±cƒ± bilgilerini g√ºncelle
                if (AuthService.CurrentUser != null)
                {
                    AuthService.CurrentUser.Email = profileModel.Email;
                }
                Logger.LogInformation($"‚úÖ Profil ba≈üarƒ±yla g√ºncellendi - Email: {profileModel.Email}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(errorContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "Profil g√ºncellenirken bir hata olu≈ütu.";
                    }
                    else
                    {
                        message = "Profil g√ºncellenirken bir hata olu≈ütu.";
                    }
                }
                catch
                {
                    message = "Profil g√ºncellenirken bir hata olu≈ütu.";
                }
                isSuccess = false;
                Logger.LogError($"‚ùå Profil g√ºncelleme API hatasƒ±: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Profil g√ºncelleme hatasƒ±: {ex.Message}");
            message = "Profil g√ºncellenirken bir hata olu≈ütu.";
            isSuccess = false;
        }
        finally
        {
            isUpdatingProfile = false;
        }
    }

    private async Task ChangePassword()
    {
        if (isChangingPassword) return;
        
        isChangingPassword = true;
        message = "";
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var changeRequest = new { 
                CurrentPassword = passwordModel.CurrentPassword,
                NewPassword = passwordModel.NewPassword 
            };
            var json = JsonSerializer.Serialize(changeRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("https://apiservice/api/user/change-password", content);
            if (response.IsSuccessStatusCode)
            {
                var successContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(successContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "≈ûifreniz ba≈üarƒ±yla deƒüi≈ütirildi!";
                    }
                    else
                    {
                        message = "≈ûifreniz ba≈üarƒ±yla deƒüi≈ütirildi!";
                    }
                }
                catch
                {
                    message = "≈ûifreniz ba≈üarƒ±yla deƒüi≈ütirildi!";
                }
                isSuccess = true;
                passwordModel = new PasswordChangeModel();
                Logger.LogInformation($"‚úÖ ≈ûifre ba≈üarƒ±yla deƒüi≈ütirildi");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(errorContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "≈ûifre deƒüi≈ütirilirken bir hata olu≈ütu.";
                    }
                    else
                    {
                        message = "≈ûifre deƒüi≈ütirilirken bir hata olu≈ütu. Mevcut ≈üifrenizi kontrol edin.";
                    }
                }
                catch
                {
                    message = "≈ûifre deƒüi≈ütirilirken bir hata olu≈ütu. Mevcut ≈üifrenizi kontrol edin.";
                }
                isSuccess = false;
                Logger.LogError($"‚ùå ≈ûifre deƒüi≈ütirme API hatasƒ±: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå ≈ûifre deƒüi≈ütirme hatasƒ±: {ex.Message}");
            message = "≈ûifre deƒüi≈ütirilirken bir hata olu≈ütu.";
            isSuccess = false;
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private async Task ChangeEmail()
    {
        if (isChangingEmail) return;
        
        isChangingEmail = true;
        message = "";
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var changeRequest = new { 
                NewEmail = emailModel.NewEmail,
                Password = emailModel.Password 
            };
            var json = JsonSerializer.Serialize(changeRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("https://apiservice/api/user/change-email", content);
            if (response.IsSuccessStatusCode)
            {
                var successContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(successContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "E-posta adresiniz ba≈üarƒ±yla deƒüi≈ütirildi!";
                    }
                    else
                    {
                        message = "E-posta adresiniz ba≈üarƒ±yla deƒüi≈ütirildi!";
                    }
                }
                catch
                {
                    message = "E-posta adresiniz ba≈üarƒ±yla deƒüi≈ütirildi!";
                }
                isSuccess = true;
                emailModel.CurrentEmail = emailModel.NewEmail;
                emailModel.NewEmail = "";
                emailModel.Password = "";
                
                // AuthService'deki e-posta bilgisini g√ºncelle
                if (AuthService.CurrentUser != null)
                {
                    AuthService.CurrentUser.Email = emailModel.CurrentEmail;
                }
                Logger.LogInformation($"‚úÖ E-posta ba≈üarƒ±yla deƒüi≈ütirildi - NewEmail: {emailModel.CurrentEmail}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(errorContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "E-posta deƒüi≈ütirilirken bir hata olu≈ütu.";
                    }
                    else
                    {
                        message = "E-posta deƒüi≈ütirilirken bir hata olu≈ütu. ≈ûifrenizi kontrol edin.";
                    }
                }
                catch
                {
                    message = "E-posta deƒüi≈ütirilirken bir hata olu≈ütu. ≈ûifrenizi kontrol edin.";
                }
                isSuccess = false;
                Logger.LogError($"‚ùå E-posta deƒüi≈ütirme API hatasƒ±: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå E-posta deƒüi≈ütirme hatasƒ±: {ex.Message}");
            message = "E-posta deƒüi≈ütirilirken bir hata olu≈ütu.";
            isSuccess = false;
        }
        finally
        {
            isChangingEmail = false;
        }
    }

    private async Task UpdatePrivacySettings()
    {
        if (isUpdatingPrivacy) return;
        
        isUpdatingPrivacy = true;
        message = "";
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var json = JsonSerializer.Serialize(privacyModel);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PutAsync("https://apiservice/api/user/privacy-settings", content);
            if (response.IsSuccessStatusCode)
            {
                message = "Gizlilik ayarlarƒ±nƒ±z ba≈üarƒ±yla g√ºncellendi!";
                isSuccess = true;
            }
            else
            {
                message = "Gizlilik ayarlarƒ± g√ºncellenirken bir hata olu≈ütu.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Gizlilik ayarlarƒ± g√ºncelleme hatasƒ±: {ex.Message}");
            message = "Gizlilik ayarlarƒ± g√ºncellenirken bir hata olu≈ütu.";
            isSuccess = false;
        }
        finally
        {
            isUpdatingPrivacy = false;
        }
    }

    private async Task UpdateNotificationSettings()
    {
        if (isUpdatingNotifications) return;
        
        isUpdatingNotifications = true;
        message = "";
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var json = JsonSerializer.Serialize(notificationModel);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PutAsync("https://apiservice/api/user/notification-settings", content);
            if (response.IsSuccessStatusCode)
            {
                message = "Bildirim ayarlarƒ±nƒ±z ba≈üarƒ±yla g√ºncellendi!";
                isSuccess = true;
            }
            else
            {
                message = "Bildirim ayarlarƒ± g√ºncellenirken bir hata olu≈ütu.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Bildirim ayarlarƒ± g√ºncelleme hatasƒ±: {ex.Message}");
            message = "Bildirim ayarlarƒ± g√ºncellenirken bir hata olu≈ütu.";
            isSuccess = false;
        }
        finally
        {
            isUpdatingNotifications = false;
        }
    }

    private async Task UnblockUser(int userId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await httpClient.DeleteAsync($"https://apiservice/api/user/block/{userId}");
            if (response.IsSuccessStatusCode)
            {
                blockedUsers.RemoveAll(u => u.Id == userId);
                message = "Kullanƒ±cƒ±nƒ±n engeli ba≈üarƒ±yla kaldƒ±rƒ±ldƒ±!";
                isSuccess = true;
                StateHasChanged();
            }
            else
            {
                message = "Engel kaldƒ±rƒ±lƒ±rken bir hata olu≈ütu.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Engel kaldƒ±rma hatasƒ±: {ex.Message}");
            message = "Engel kaldƒ±rƒ±lƒ±rken bir hata olu≈ütu.";
            isSuccess = false;
        }
    }

    private async Task DeleteAccount()
    {
        if (isDeletingAccount || !confirmDelete) return;
        
        isDeletingAccount = true;
        message = "";
        
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var deleteRequest = new { 
                Password = deleteAccountModel.Password
            };
            var json = JsonSerializer.Serialize(deleteRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Delete, "https://apiservice/api/user/delete-account") { Content = content });
            if (response.IsSuccessStatusCode)
            {
                var successContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(successContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "Hesabƒ±nƒ±z ba≈üarƒ±yla silindi!";
                    }
                    else
                    {
                        message = "Hesabƒ±nƒ±z ba≈üarƒ±yla silindi!";
                    }
                }
                catch
                {
                    message = "Hesabƒ±nƒ±z ba≈üarƒ±yla silindi!";
                }
                isSuccess = true;
                
                // Kullanƒ±cƒ±yƒ± √ßƒ±kƒ±≈ü yap
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "token");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "user");
                
                // Ana sayfaya y√∂nlendir
                await Task.Delay(2000);
                Navigation.NavigateTo("/", forceLoad: true);
                
                Logger.LogInformation("‚úÖ Hesap ba≈üarƒ±yla silindi");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var apiResponse = JsonSerializer.Deserialize<JsonElement>(errorContent);
                    if (apiResponse.TryGetProperty("message", out var messageElement))
                    {
                        message = messageElement.GetString() ?? "Hesap silinirken bir hata olu≈ütu.";
                    }
                    else
                    {
                        message = "Hesap silinirken bir hata olu≈ütu. ≈ûifrenizi kontrol edin.";
                    }
                }
                catch
                {
                    message = "Hesap silinirken bir hata olu≈ütu. ≈ûifrenizi kontrol edin.";
                }
                isSuccess = false;
                Logger.LogError($"‚ùå Hesap silme API hatasƒ±: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"‚ùå Hesap silme hatasƒ±: {ex.Message}");
            message = "Hesap silinirken bir hata olu≈ütu.";
            isSuccess = false;
        }
        finally
        {
            isDeletingAccount = false;
        }
    }

    private string GetUserInitials(string username)
    {
        if (string.IsNullOrEmpty(username)) return "?";
        return username.Length >= 2 ? username.Substring(0, 2).ToUpper() : username.ToUpper();
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1) return "az √∂nce";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}dk √∂nce";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}sa √∂nce";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}g√ºn √∂nce";
        
        return dateTime.ToString("dd.MM.yyyy");
    }

    public class ProfileUpdateModel
    {
        public string Username { get; set; } = "";
        
        [Required(ErrorMessage = "E-posta adresi gerekli")]
        [EmailAddress(ErrorMessage = "Ge√ßerli bir e-posta adresi girin")]
        public string Email { get; set; } = "";
        
        [StringLength(500, ErrorMessage = "Hakkƒ±nda kƒ±smƒ± en fazla 500 karakter olabilir")]
        public string Bio { get; set; } = "";
    }

    public class PasswordChangeModel
    {
        [Required(ErrorMessage = "Mevcut ≈üifre gerekli")]
        public string CurrentPassword { get; set; } = "";
        
        [Required(ErrorMessage = "Yeni ≈üifre gerekli")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "≈ûifre en az 6 karakter olmalƒ±")]
        public string NewPassword { get; set; } = "";
        
        [Required(ErrorMessage = "≈ûifre tekrarƒ± gerekli")]
        [Compare("NewPassword", ErrorMessage = "≈ûifreler e≈üle≈ümiyor")]
        public string ConfirmPassword { get; set; } = "";
    }

    public class EmailChangeModel
    {
        public string CurrentEmail { get; set; } = "";
        
        [Required(ErrorMessage = "Yeni e-posta adresi gerekli")]
        [EmailAddress(ErrorMessage = "Ge√ßerli bir e-posta adresi girin")]
        public string NewEmail { get; set; } = "";
        
        [Required(ErrorMessage = "≈ûifre gerekli")]
        public string Password { get; set; } = "";
    }

    public class PrivacySettingsModel
    {
        public bool IsProfilePrivate { get; set; }
        public bool AllowMessagesFromFriendsOnly { get; set; }
        public bool HideFollowersList { get; set; }
        public bool HideOnlineStatus { get; set; }
        public bool MakeEntriesPrivate { get; set; }
    }

    public class NotificationSettingsModel
    {
        public bool FriendRequests { get; set; } = true;
        public bool NewFollowers { get; set; } = true;
        public bool NewMessages { get; set; } = true;
        public bool EntryLikes { get; set; } = true;
        public bool EntryComments { get; set; } = true;
    }

    public class BlockedUserModel
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string? ProfilePhotoUrl { get; set; }
        public DateTime BlockedAt { get; set; }
    }

    public class DeleteAccountModel
    {
        [Required(ErrorMessage = "≈ûifre gerekli")]
        public string Password { get; set; } = "";
    }
}