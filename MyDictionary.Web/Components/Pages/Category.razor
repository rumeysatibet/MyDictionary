@page "/category/{slug}"
@rendermode InteractiveServer
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Category> Logger
@inject NavigationManager Navigation

<PageTitle>@(category?.Name ?? "Kategori Bulunamadƒ±") - MyDictionary</PageTitle>

<div class="category-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Kategori y√ºkleniyor...</p>
        </div>
    }
    else if (category == null)
    {
        <div class="not-found-container">
            <div class="not-found-content">
                <h1>üòï Kategori Bulunamadƒ±</h1>
                <p>Aradƒ±ƒüƒ±nƒ±z kategori mevcut deƒüil veya kaldƒ±rƒ±lmƒ±≈ü olabilir.</p>
                <a href="/" class="btn-primary">Ana Sayfaya D√∂n</a>
            </div>
        </div>
    }
    else
    {
        <div class="category-header">
            <div class="category-info">
                <span class="category-icon">@category.Icon</span>
                <div class="category-details">
                    <h1>@category.Name</h1>
                    <p class="category-description">@category.Description</p>
                    <div class="category-stats">
                        <span class="stat">@category.TopicCount topic</span>
                        <span class="stat">@totalEntries entry</span>
                    </div>
                </div>
            </div>
        </div>

        @if (topics.Any())
        {
            <div class="category-topics">
                <div class="topics-header">
                    <h2>üìù Topic'ler</h2>
                    <div class="sort-options">
                        <select @onchange="OnSortChanged" class="sort-select">
                            <option value="latest">En Yeni</option>
                            <option value="popular">En Pop√ºler</option>
                            <option value="entries">Entry Sayƒ±sƒ±</option>
                        </select>
                    </div>
                </div>

                <div class="topics-list">
                    @foreach (var topic in topics)
                    {
                        <div class="topic-item" @onclick="() => NavigateToTopic(topic.Slug)">
                            <div class="topic-content">
                                <h3 class="topic-title">@topic.Title</h3>
                                <div class="topic-meta">
                                    <span class="topic-author">@topic.CreatedByUsername</span>
                                    <span class="topic-date">@GetTimeAgo(topic.CreatedAt)</span>
                                    <span class="topic-stats">
                                        @topic.EntryCount entry ‚Ä¢ @topic.ViewCount g√∂r√ºnt√ºlenme
                                    </span>
                                </div>
                                @if (topic.LastEntryAt.HasValue)
                                {
                                    <div class="last-entry">
                                        Son entry: @GetTimeAgo(topic.LastEntryAt.Value)
                                    </div>
                                }
                            </div>
                            <div class="topic-arrow">‚Üí</div>
                        </div>
                    }
                </div>

                @if (hasMoreTopics)
                {
                    <div class="load-more">
                        <button class="btn-secondary" @onclick="LoadMoreTopics" disabled="@isLoadingMore">
                            @if (isLoadingMore)
                            {
                                <span>Y√ºkleniyor...</span>
                            }
                            else
                            {
                                <span>Daha Fazla Y√ºkle</span>
                            }
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-topics">
                <div class="no-topics-content">
                    <span class="no-topics-icon">üìù</span>
                    <h3>Hen√ºz Topic Yok</h3>
                    <p>Bu kategoride hen√ºz hi√ß topic bulunmuyor.</p>
                    <p>ƒ∞lk topic'i sen a√ß!</p>
                    <a href="/newtopic" class="btn-primary">Topic A√ß</a>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public string? Slug { get; set; }
    
    private CategoryModel? category;
    private List<TopicModel> topics = new();
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private bool hasMoreTopics = false;
    private int currentPage = 1;
    private int pageSize = 20;
    private string sortBy = "latest";
    private int totalEntries = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            await LoadCategoryData();
        }
    }

    private async Task LoadCategoryData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var httpClient = HttpClientFactory.CreateClient("ApiService");
            
            // Kategori bilgilerini y√ºkle
            var categoryResponse = await httpClient.GetAsync($"https://apiservice/api/categories/{Slug}");
            
            if (categoryResponse.IsSuccessStatusCode)
            {
                var categoryContent = await categoryResponse.Content.ReadAsStringAsync();
                var categoryJson = JsonSerializer.Deserialize<JsonElement>(categoryContent);
                
                if (categoryJson.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    if (categoryJson.TryGetProperty("category", out var categoryElement))
                    {
                        category = new CategoryModel
                        {
                            Id = categoryElement.GetProperty("id").GetInt32(),
                            Name = categoryElement.GetProperty("name").GetString() ?? "",
                            Slug = categoryElement.GetProperty("slug").GetString() ?? "",
                            Description = categoryElement.GetProperty("description").GetString() ?? "",
                            Icon = categoryElement.GetProperty("icon").GetString() ?? "üìÇ",
                            Color = categoryElement.TryGetProperty("color", out var colorElement) ? colorElement.GetString() ?? "" : "",
                            TopicCount = categoryElement.GetProperty("topicCount").GetInt32()
                        };
                    }
                }
                
                // Topic'leri y√ºkle
                await LoadTopics();
            }
            else
            {
                Logger.LogWarning($"Kategori bulunamadƒ±: {Slug}");
                category = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Kategori y√ºkleme hatasƒ±: {ex.Message}");
            category = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTopics(bool append = false)
    {
        try
        {
            if (!append)
            {
                topics.Clear();
                currentPage = 1;
            }

            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var topicsResponse = await httpClient.GetAsync($"https://apiservice/api/categories/{Slug}/topics?page={currentPage}&pageSize={pageSize}&sortBy={sortBy}");
            
            if (topicsResponse.IsSuccessStatusCode)
            {
                var topicsContent = await topicsResponse.Content.ReadAsStringAsync();
                var topicsJson = JsonSerializer.Deserialize<JsonElement>(topicsContent);
                
                if (topicsJson.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                {
                    totalEntries = topicsJson.TryGetProperty("totalEntries", out var entriesElement) ? entriesElement.GetInt32() : 0;
                    hasMoreTopics = topicsJson.TryGetProperty("hasMore", out var hasMoreElement) && hasMoreElement.GetBoolean();
                    
                    if (topicsJson.TryGetProperty("topics", out var topicsElement))
                    {
                        foreach (var topicElement in topicsElement.EnumerateArray())
                        {
                            var topic = new TopicModel
                            {
                                Id = topicElement.GetProperty("id").GetInt32(),
                                Title = topicElement.GetProperty("title").GetString() ?? "",
                                Slug = topicElement.GetProperty("slug").GetString() ?? "",
                                CreatedByUsername = topicElement.GetProperty("createdByUsername").GetString() ?? "",
                                CreatedAt = topicElement.GetProperty("createdAt").GetDateTime(),
                                EntryCount = topicElement.GetProperty("entryCount").GetInt32(),
                                ViewCount = topicElement.GetProperty("viewCount").GetInt32(),
                                LastEntryAt = topicElement.TryGetProperty("lastEntryAt", out var lastEntryElement) && lastEntryElement.ValueKind != JsonValueKind.Null ? lastEntryElement.GetDateTime() : null
                            };
                            topics.Add(topic);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Topic'ler y√ºkleme hatasƒ±: {ex.Message}");
        }
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "latest";
        await LoadTopics();
        StateHasChanged();
    }

    private async Task LoadMoreTopics()
    {
        if (isLoadingMore || !hasMoreTopics) return;
        
        isLoadingMore = true;
        currentPage++;
        
        await LoadTopics(append: true);
        
        isLoadingMore = false;
        StateHasChanged();
    }

    private void NavigateToTopic(string topicSlug)
    {
        Navigation.NavigateTo($"/topic/{topicSlug}");
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1) return "az √∂nce";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}dk √∂nce";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}sa √∂nce";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}g√ºn √∂nce";
        
        return dateTime.ToString("dd MMM yyyy");
    }

    public class CategoryModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Slug { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public int TopicCount { get; set; }
    }

    public class TopicModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Slug { get; set; } = "";
        public string CreatedByUsername { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public DateTime? LastEntryAt { get; set; }
        public int EntryCount { get; set; }
        public int ViewCount { get; set; }
    }
}